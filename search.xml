<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>微服务</title>
      <link href="/2022/09/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
      <url>/2022/09/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="单体架构"><a href="#单体架构" class="headerlink" title="单体架构"></a>单体架构</h1><ul><li><p>在软件设计中，经常提及和使用经典3层模型，即表示层、业务逻辑层、数据访问层。</p></li><li><p>表示层：用于直接和用户交互，也称为交互层，通常是网页、UI等</p></li><li><p>业务逻辑层：即业务逻辑处理层，例如用户输入的信息要经过业务逻辑层的处理后才能展现给用户</p></li><li><p>数据访问层：用于操作数据库，用户在表示层会产生大量的数据，通过数据访问层对数据库进行读写操作</p></li><li><p>一个经典的单体应用就是将所有的业务场景的表示层、业务逻辑层和数据访问层放在一个工程中最终经过编译、打包，部署在一台服务器上。</p></li></ul><p><img src="/2022/09/03/%E5%BE%AE%E6%9C%8D/pasted-1.png" alt="经典单体架构"></p><h2 id="LTMJ应用服务器示"><a href="#LTMJ应用服务器示" class="headerlink" title="LTMJ应用服务器示"></a>LTMJ应用服务器示</h2><p>如左图所示，LTMJ系统即是<br>服务器是linux系统，<br>开发应用程序语言是JAVA,<br>部署在Tomcat上，<br>采用MySQL数据库<br><img src="/2022/09/03/%E5%BE%AE%E6%9C%8D/pasted-2.png" alt="LTMJ应用服务器示意图"></p><h2 id="单体架构有什么问题"><a href="#单体架构有什么问题" class="headerlink" title="单体架构有什么问题"></a>单体架构有什么问题</h2><ul><li><p>1.复杂性逐渐变高</p><p>业务越来越复杂，单体应用的代码量越来越大，代码可读性、可维护性、可扩展性下降，新人接手代码所需的时间成倍增加，业务扩展带来的代价越来越大</p></li><li><p>2.单体应用并发能力有限</p></li></ul><p> 随着用户越来越多，程序承受的并发越来越高，单体应用的并发能力有限</p><ul><li>3.测试难度大</li></ul><p>单体应用的业务都在用一个程序中，随着业务的扩张、复杂度的增加，单体应用的修改或添加业务和或许会给其他业务带来一定的影响，导致测试难度增加</p><h2 id="单体应用集群架构"><a href="#单体应用集群架构" class="headerlink" title="单体应用集群架构"></a>单体应用集群架构</h2><p>1 系统仍然为单体应用</p><p>2 面对海量用户，数据库将会成为瓶颈，解决方案：分布式数据库，分库分表</p><p>3 持续交付能力差，业务越来越复杂，代码越多，修改的和添加代码所需时间长，新人熟悉代码时间长，成本高</p><p><img src="/2022/09/03/%E5%BE%AE%E6%9C%8D/pasted-3.png" alt="单体应用集群架构"></p><h1 id="什么是微服务"><a href="#什么是微服务" class="headerlink" title="什么是微服务"></a>什么是微服务</h1><ul><li>微服务最早由Martin Fowler与James Lewis于2014年共同提出，微服务架构风格是一种使用一套小服务来开发单个应用的方式途径，每个服务运行在自己的进程中，并使用轻量级机制通信，通常是HTTP API，这些服务基于业务能力构建，并能够通过自动化部署机制来独立部署，这些服务使用不同的编程语言实现，以及不同数据存储技术，并保持最低限度的集中式管理。</li><li>微服务的特性：<ul><li>按业务拆分为一个独立运行的程序，即服务单元</li><li>服务之间通过HTTP协议相互通讯</li><li>自动化部署</li><li>可以使用不同编程语言</li><li>可以使用不同存储技术</li><li>服务集中化管理</li><li>微服务是一个分布式系统</li></ul></li></ul><h2 id="微服务单元按业务拆分"><a href="#微服务单元按业务拆分" class="headerlink" title="微服务单元按业务拆分"></a>微服务单元按业务拆分</h2><ul><li><p>微服务的“微”是按照业务拆分，一个大的业务可以拆分成若干的小的业务，一个小的业务又可以拆分成若干更小的业务，业务怎么拆分是有开发人员自己决定</p></li><li><p>按业务划分的微服务单元独立部署，运行在独立的进程中。这些微服务是高度组件化的模块，并提供了稳定额模块边界，服务与服务之间没有任何的耦合，有非常好的扩展性和复用性。</p></li><li><p>现有我们开发模式通常由UI团队、服务端团队、数据库和运维团队构成，每个人各司其职，很少跨职能工作。</p></li><li><p>现在按照业务来划分服务，每个服务都需要UI、服务端、数据库和运维。也就是说一个小的业务的微服务需要动用一个团队的人协作，这显然添加了团队和团队之间交流协作的成本，所以产生了跨职能团队，这个团队复杂一个服务的所有工作，包括UI，服务端和数据库。若这个团队只有1-2个人，就对开发人员提出更高的要求</p></li></ul><h2 id="微服务通过HTTP来互相通信"><a href="#微服务通过HTTP来互相通信" class="headerlink" title="微服务通过HTTP来互相通信"></a>微服务通过HTTP来互相通信</h2><ul><li><p>按照业务拆分的微服务反应独立部署，并允许在各自的进程中。</p></li><li><p>微服务单元之间的通信方式一般倾向于使用HTTP这种简单的通信机制，更多时候是使用RESTfulAPI</p></li><li><p>服务与服务之间也可以通过轻量级的消息总线来通信，例如RabbitMQ、Kafaka.通过发送消息或订阅消息来达到服务与服务之间通信的目的</p></li><li><p>这两种方式有弊端：其通信机制是不可靠的，虽然成功率很高，但还是会有失败的时候</p></li></ul><p><img src="/2022/09/03/%E5%BE%AE%E6%9C%8D/pasted-4.png" alt="微服务通过HTTP来互相通信">    </p><h2 id="微服务的数据库独立"><a href="#微服务的数据库独立" class="headerlink" title="微服务的数据库独立"></a>微服务的数据库独立</h2><ul><li>例如 一个应用有这样的几个业务：用户的信息、用户的账户，用户购物车、素报表服务等，所有业务都共用一个数据库，随着业务量的添加，数据库的表数量越来越多，难以管理和维护，并且数据量的添加会导致查询速度越来越慢。</li></ul><p><img src="/2022/09/03/%E5%BE%AE%E6%9C%8D/pasted-5.png" alt="单体架构"></p><ul><li>每个微服务都有自己的数据库，他们之间数据库是没有联系。每个服务所使用的数据库存储技术å是根据业务需求决定<br><img src="/2022/09/03/%E5%BE%AE%E6%9C%8D/pasted-6.png" alt="微服务"></li></ul><h2 id="微服务的自动化部署"><a href="#微服务的自动化部署" class="headerlink" title="微服务的自动化部署"></a>微服务的自动化部署</h2><ul><li>自动化部署可以提供部署的效率，减少人为的控制，部署过程中出现的错误的概率降低，提供软件的质量</li><li>构建一个自动化部署的系统，虽然在前期需要开发人员或运维人员学习</li><li>随着客户实施DevOps，自动化部署必然会成为微服务部署一种方式<br>如果微服务按照单体架构的部署方式，则部署难度会呈指数增加。随着技术的发展，Docker容器技术、Kubernetes技术的推进，以及自动化部署工具（Jenkins）出现，自动化部署变得越来越简单</li></ul><p><img src="/2022/09/03/%E5%BE%AE%E6%9C%8D/pasted-7.png" alt="微服务的自动化部署"></p><h2 id="服务集中化管理"><a href="#服务集中化管理" class="headerlink" title="服务集中化管理"></a>服务集中化管理</h2><ul><li>微服务系统是按业务单元来划分，服务数量越多，管理起来就越复杂，因此微服务必须使用集中化管理。目前流行的微服务框架中，例如Spring cloud 采用Eureka来注册服务</li></ul><h2 id="分布式架构"><a href="#分布式架构" class="headerlink" title="分布式架构"></a>分布式架构</h2><ul><li>分布式系统是集群部署，由很多计算机相互协作共同构成，它能够处理海量用户的请求，当分布式系统对外提供服务时，用户是毫不知情的，还以为是一台服务器在提供服务。</li><li>微服务架构是分布式架构，是集群化部署，会给数据一致性带来困难，分布式系统中的服务通信依赖于网络，网络不好，必然会对分布式系统带来很大的影响，在分布式系统中服务之间相互依赖，如果一个服务出现了故障或网络延迟，在高并发的情况下，会导致线程阻塞，在很短时间内该服务的线程资源会消耗殆尽，最终服务不可用，由于服务的相互依赖，可能会导致整个系统不可用，这就是“雪崩效应”，为了防止此类事件的发生，分布式系统必然要采取相应的措施，例如熔断机制。</li></ul><h2 id="熔断机制"><a href="#熔断机制" class="headerlink" title="熔断机制"></a>熔断机制</h2><ul><li>为了防止雪崩效应事件的发生，分布式系统采用熔断机制。在用Spring cloud构建的微服务系统中，采用了熔断器（即Hystrix组建的Circuit breaker）去做熔断</li><li>例如在微服务系统中 有a、b、c、d等多个微服务，用户的请求通过网关后再到具体的服务，服务之间相互依赖，例如服务b依赖服务d，一个对外暴露的API需要服务b和服务d相互协作才能完成</li></ul><p><img src="/2022/09/03/%E5%BE%AE%E6%9C%8D/pasted-8.png" alt="微服务"><br>如果此时服务b出现故障或者网络延迟在高并发的情况下，服务b会出现大量的线程阻塞，有可能在很短时间内线程资源就会被耗尽，导致服务b的不可用。<br>如果此时没有熔断机制就会导致雪崩效应<br>为了解决此问题，引入熔断机制：</p><p><img src="/2022/09/03/%E5%BE%AE%E6%9C%8D/pasted-9.png" alt="b服务故障"></p><p><img src="/2022/09/03/%E5%BE%AE%E6%9C%8D/pasted-10.png" alt="b服务熔断"></p><ul><li>熔断机制<br>主要在三种状态中转换：</li><li>关闭状态 ：</li></ul><p> 当熔断器处于关闭状态时，请求是可以被放行的；<br> 当熔断器统计的失败次数触发开关时，转为打开状态。</p><ul><li>打开状态 ：</li></ul><p>当熔断器处于打开状态时，所有请求都是不被放行的，直接返回失败；<br>只有在经过一个设定的时间窗口周期后，熔断器才会转换到半开状态</p><ul><li>半开状态 ：</li></ul><p>当熔断器处于半开状态时，当前只能有一个请求被放行；<br>这个被放行的请求获得远端服务的响应后，假如是成功的，熔断器转换为关闭状态，否则转换到打开状态。</p><p><img src="/2022/09/03/%E5%BE%AE%E6%9C%8D/pasted-11.png" alt="熔断机制"></p><h1 id="微服务优势"><a href="#微服务优势" class="headerlink" title="微服务优势"></a>微服务优势</h1><ul><li><p>微服务是松藕合的，无论是在开发阶段或部署阶段都是独立的。</p></li><li><p>能够快速响应, 局部修改容易, 一个服务出现问题不会影响整个应用。</p></li><li><p>易于和第三方应用系统集成, 支持使用不同的语言开发, 允许你利用融合最新技术。</p></li><li><p>每个微服务都很小，足够内聚，足够小，代码容易理解。团队能够更关注自己的工作成果, 聚焦指定的业务功能或业务需求。</p></li><li><p>开发简单、开发效率提高，一个服务可能就是专一的只干一件事, 能够被小团队单独开发，这个小团队可以是 2 到 5 人的开发人员组成。</p></li></ul><h1 id="微服务的不足"><a href="#微服务的不足" class="headerlink" title="微服务的不足"></a>微服务的不足</h1><ul><li><p>微服务的复杂度</p><p> 开发人员需要付出一定的学习成本去掌握更多架构知识和框架知识；另外服务与服务之间是相互依赖，若修改一个服务就会对另外一个服务产生影响；</p></li><li><p>分布式事务</p><p>   在微服务架构应用中，需要更新不同服务所使用的不同的数据库</p></li><li><p>服务的划分</p><p>如何拆分服务</p></li><li><p>服务的部署</p><p> 需要对微服务有足够强的控制力，及自动化部署（例如使用阿里云提供paas服务）</p></li></ul><h1 id="微服务特点"><a href="#微服务特点" class="headerlink" title="微服务特点"></a>微服务特点</h1><p>根据微服务的特点，一个微服务应该有以下功能</p><ul><li>服务的注册和发现</li><li>服务的负载均衡 </li><li>服务的容错</li><li>服务的网关</li><li>服务配置的统一管理</li><li>链路跟踪</li><li>实时日志</li></ul><h2 id="服务的注册与消费"><a href="#服务的注册与消费" class="headerlink" title="服务的注册与消费"></a>服务的注册与消费</h2><ul><li><p>微服务系统是由很多个单一职责的服务单元组成，需要服务注册中心类统一管理这些微服务实例，方便查看每个微服务实例的健康状态。</p></li><li><p>服务注册是指向服务注册中心注册一个服务实例，服务提供者将自己的服务信息（服务名、IP地址）告知服务注册中心。</p></li><li><p>服务发现是指当服务消费者需要消费另外一个服务时，服务注册中心能够告知服务消费者它所要消费服务的实例信息（如服务名，IP地址等）</p></li><li><p>服务消费者一般使用HTTP协议来进行服务消费</p></li><li><p>服务注册中心会提供服务的健康检查方案，检查被注册的服务是否可用</p></li></ul><p><img src="/2022/09/03/%E5%BE%AE%E6%9C%8D/pasted-12.png" alt="服务的注册与消费"></p><h2 id="服务的负载均衡"><a href="#服务的负载均衡" class="headerlink" title="服务的负载均衡"></a>服务的负载均衡</h2><ul><li><p>在微服务架构中，服务之间的相互调用一般是通过HTTP通信协议来实现。但网络往往不可靠，为了保证服务的高可用，服务单元往往集群化部署。那服务消费者该调用哪个服务提供者的实例呢？</p></li><li><p>如图所示：所有服务都向服务注册中心注册（IP，服务名），服务消费者集成负载均衡组件，该组件会向服务消费者获取服务的注册列表信息，每隔一段时间重现刷新获取改列表。当服务消费者消费服务时，负载均衡组件获取服务提供者所有实例注册信息，并通过一定的负载均衡策略，选择一个服务提供者的实例，向该实例进行服务消费。</p></li><li><p>另外服务注册中心不但需要定时接收每个服务的心跳（用来检查服务是否可用），而且每个服务会定期获取服务注册列表的信息，当服务实例数量很多，服务注册中心承担了非常大的负载。由于服务注册中心很重要，所以必须实现高可用。</p></li></ul><p><img src="/2022/09/03/%E5%BE%AE%E6%9C%8D/pasted-13.png" alt="服务的负载均衡"></p><h2 id="服务的容错"><a href="#服务的容错" class="headerlink" title="服务的容错"></a>服务的容错</h2><p><a href="/2022/09/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1/#%E7%86%94%E6%96%AD%E6%9C%BA%E5%88%B6">熔断机制</a></p><h2 id="服务网关"><a href="#服务网关" class="headerlink" title="服务网关"></a>服务网关</h2><ul><li><p>微服务系统接口资源通常由服务网关统一暴露，内部服务不直接对外提供API资源的暴露。</p></li><li><p>网关的作用</p><ul><li>统一暴露微服务系统对外服务的接口</li><li>用户身份认证、权限认证</li><li>实现监控功能，实时日志输出，对请求进行记录</li><li>流量监控，在高并发的情况，对服务进行降级</li></ul></li></ul><p><img src="/2022/09/03/%E5%BE%AE%E6%9C%8D/pasted-14.png" alt="服务网关"></p><h2 id="服务配置的统一管理"><a href="#服务配置的统一管理" class="headerlink" title="服务配置的统一管理"></a>服务配置的统一管理</h2><ul><li>在微服务架构中，需要有统一管理配置文件的组件，例如Spring cloud的config,阿里Nacos</li></ul><p>如图所示：<br>    * 1 ）首先Config server读取配置文件仓库的配置信息，仓库可以是本地仓库或git</p><pre><code>* 2） 配置服务启动时，读取配置文件信息，缓存在内存中* 3 ）由于a、b、c等服务指定了向配置服务读取配置信息，所以这些服务启动时就会向配置中心读取配置</code></pre><p><img src="/2022/09/03/%E5%BE%AE%E6%9C%8D/pasted-15.png" alt="服务配置的统一管理"></p><h2 id="服务链路跟踪"><a href="#服务链路跟踪" class="headerlink" title="服务链路跟踪"></a>服务链路跟踪</h2><ul><li><p>微服务系统有很多个服务，且服务与服务之间的调用有可能很复杂，一旦出现异常和错误很难定位。</p></li><li><p>所以微服务架构中必须实现分布式链路跟踪，去跟进一个请求到底有哪些服务参与，参与的顺序又是怎么样的。从而使每个请求链路清晰可见</p></li><li><p>如果所示 一个接口首先调服务A，后再调用B，而B需要调用C，对于这样一个请求需要三个服务，怎么样将它的请求过程的数据记录下，这就需要服务链路跟踪</p></li><li><p>目前链路跟踪组件：Google的Dapper、Twitter的Zipkin</p></li></ul><p><img src="/2022/09/03/%E5%BE%AE%E6%9C%8D/pasted-16.png" alt="服务链路跟踪"></p><h1 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h1><p><img src="/2022/09/03/%E5%BE%AE%E6%9C%8D/pasted-17.png" alt="Spring Cloud"></p><h2 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h2><ul><li>SpringCloud是基于Spring boot的。而Spring boot是简化了Spring的复杂的配置和依赖管理，从而提高在开发和部署上的效率。</li><li>目标：通过一系列的开发组件和框架，帮助开发者迅速搭建一个分布式的微服务系统。<br>常用组件：</li></ul><p><img src="/2022/09/03/%E5%BE%AE%E6%9C%8D/pasted-18.png" alt="组件1"></p><p><img src="/2022/09/03/%E5%BE%AE%E6%9C%8D/pasted-19.png" alt="组件2"></p><p><img src="/2022/09/03/%E5%BE%AE%E6%9C%8D/pasted-20.png" alt="简单微服务"></p><h1 id="构建微服务"><a href="#构建微服务" class="headerlink" title="构建微服务"></a>构建微服务</h1><ul><li>开发环境：Jdk1.8,MAVEN3.2.3,Eclipse</li><li>spring cloud版本：Greenwich.SR2</li><li>Spring boot：2.1.6.RELEASE</li></ul><p><img src="/2022/09/03/%E5%BE%AE%E6%9C%8D/pasted-21.png" alt="微服务"></p><ul><li>部署环境：<ul><li>k8s matser: 2核cpu 系统 cenots 7.9 硬盘20g 内存2048m ip:192.168.31.59 docker版本:18.09.7,k8s:1.15.1</li></ul></li><li>k8s node :2核cpu 系统 cenots 7.9 硬盘20g 内存3072 m ip:192.168.31.181 docker版本:18.09.7,k8s:1.15.1</li><li>docker：CPU1个，内存521M硬盘20G, 含有JAVA和MAVEN环境 镜像仓库使用阿里云</li><li>部署说明<br>下载[soft.zip]链接: <a href="https://pan.baidu.com/s/1jp2UuZUX-DtpVz51ucsAFA">https://pan.baidu.com/s/1jp2UuZUX-DtpVz51ucsAFA</a> 提取码: 3ahf<br>百度网盘不能下载请及时联系</li></ul><p><a href="/download/springcloud.zip">springcloud.zip</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line">------------------------------使用阿里云镜像仓库----</span><br><span class="line"><span class="comment">#上传soft文件至docker,k8smaster k8snode</span></span><br><span class="line"><span class="comment">#将镜像推送至ali,ali免费版可以存300个</span></span><br><span class="line">https:<span class="regexp">//</span>help.aliyun.com<span class="regexp">/document_detail/</span><span class="number">60945</span>.html?spm=a2c4g.<span class="number">11186623.6</span>.<span class="number">542.48983</span>d31EbMHWT</span><br><span class="line"><span class="comment">#1)仅是安装docker 环境（下载soft文件 解压后上传docker机器上root 目录 ，soft目录下installDocker.sh）</span></span><br><span class="line"><span class="comment">#docker version:18.09.7 k8s version:1.15.1</span></span><br><span class="line">tr -d <span class="string">&#x27;\r&#x27;</span> &lt;<span class="regexp">/root/</span>soft<span class="regexp">/installDocker.sh &gt; /</span>root<span class="regexp">/soft/i</span>nstallDocker_new.sh  &amp;&amp; chmod +x <span class="regexp">/root/</span>soft<span class="regexp">/*.sh &amp;&amp; /</span>root<span class="regexp">/soft/i</span>nstallDocker_new.sh  init installDocker</span><br><span class="line"><span class="comment">#登录阿里云：</span></span><br><span class="line"><span class="comment"># docker login --username=test@1594726148325608 registry.cn-shenzhen.aliyuncs.com</span></span><br><span class="line"><span class="comment">#密码：t12345678</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">#RAM用户控制台：</span></span><br><span class="line"> <span class="comment">#test@1594726148325608.onaliyun.com</span></span><br><span class="line"> <span class="comment">#密码：4DzBf)xUvq8hzY6B6QMlFR&#123;K?Oq(rsNv</span></span><br><span class="line"> <span class="comment">#https://cr.console.aliyun.com/cn-shenzhen/instance/repositories</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">#2)导入镜像：</span></span><br><span class="line">tr -d <span class="string">&#x27;\r&#x27;</span> &lt;<span class="regexp">/root/</span>soft<span class="regexp">/installDocker.sh &gt; /</span>root<span class="regexp">/soft/i</span>nstallDocker_new.sh  &amp;&amp; chmod +x <span class="regexp">/root/</span>soft<span class="regexp">/*.sh &amp;&amp; /</span>root<span class="regexp">/soft/i</span>nstallDocker_new.sh  loadJavaDockerImage</span><br><span class="line"></span><br><span class="line"> <span class="comment">#3)配置java环境：</span></span><br><span class="line"> <span class="comment">##配置java环境和MAVEN(maven库：/mavenFactory/repository)</span></span><br><span class="line">tr -d <span class="string">&#x27;\r&#x27;</span> &lt;<span class="regexp">/root/</span>soft<span class="regexp">/installDocker.sh &gt; /</span>root<span class="regexp">/soft/i</span>nstallDocker_new.sh  &amp;&amp; chmod +x <span class="regexp">/root/</span>soft<span class="regexp">/*.sh &amp;&amp; /</span>root<span class="regexp">/soft/i</span>nstallDocker_new.sh    configJava</span><br><span class="line"></span><br><span class="line"> <span class="comment">#4)build docker 新打开一个窗口执行 上传sprincloud代码至/root</span></span><br><span class="line"></span><br><span class="line">cd <span class="regexp">/root/</span>springcloud/deployment</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5)alidev（build全部）如果mvn和java配置失败 请重新执行source /etc/profile</span></span><br><span class="line">tr -d <span class="string">&#x27;\r&#x27;</span> &lt;buildDocker.sh &gt; buildDocker_bew.sh &amp;&amp; chmod +x *.sh &amp;&amp; ./buildDocker_bew.sh  -Dver=<span class="number">1.0</span>.<span class="number">0</span> -Denv=aliyun_dev</span><br><span class="line"><span class="comment">#单个</span></span><br><span class="line">tr -d <span class="string">&#x27;\r&#x27;</span> &lt;buildDocker.sh &gt; buildDocker_bew.sh &amp;&amp; chmod +x *.sh &amp;&amp; ./buildDocker_bew.sh  -Dver=<span class="number">1.0</span>.<span class="number">0</span> -Denv=aliyun_dev EurekaServer</span><br><span class="line">tr -d <span class="string">&#x27;\r&#x27;</span> &lt;buildDocker.sh &gt; buildDocker_bew.sh &amp;&amp; chmod +x *.sh &amp;&amp; ./buildDocker_bew.sh  -Dver=<span class="number">1.0</span>.<span class="number">0</span> -Denv=aliyun_dev configServer</span><br><span class="line">tr -d <span class="string">&#x27;\r&#x27;</span> &lt;buildDocker.sh &gt; buildDocker_bew.sh &amp;&amp; chmod +x *.sh &amp;&amp; ./buildDocker_bew.sh  -Dver=<span class="number">1.0</span>.<span class="number">0</span> -Denv=aliyun_dev ServiceClient</span><br><span class="line">tr -d <span class="string">&#x27;\r&#x27;</span> &lt;buildDocker.sh &gt; buildDocker_bew.sh &amp;&amp; chmod +x *.sh &amp;&amp; ./buildDocker_bew.sh  -Dver=<span class="number">1.0</span>.<span class="number">0</span> -Denv=aliyun_dev ServiceClientB</span><br><span class="line">tr -d <span class="string">&#x27;\r&#x27;</span> &lt;buildDocker.sh &gt; buildDocker_bew.sh &amp;&amp; chmod +x *.sh &amp;&amp; ./buildDocker_bew.sh  -Dver=<span class="number">1.0</span>.<span class="number">0</span> -Denv=aliyun_dev gateway</span><br><span class="line"></span><br><span class="line"><span class="comment">##--------------安装k8s master和k8s node ------------</span></span><br><span class="line"><span class="comment">#6)安装K8sMaster（soft目录下installk8sMaster.sh） 需要修改aliyun镜像仓库地址，用户户名和密码，k8smaster ip,k8s node ip</span></span><br><span class="line">tr -d <span class="string">&#x27;\r&#x27;</span> &lt;<span class="regexp">/root/</span>soft<span class="regexp">/installk8sMaster.sh &gt; /</span>root<span class="regexp">/soft/i</span>nstallk8sMaster.sh_new.sh  &amp;&amp; chmod +x <span class="regexp">/root/</span>soft<span class="regexp">/*.sh &amp;&amp; /</span>root<span class="regexp">/soft/i</span>nstallk8sMaster.sh_new.sh </span><br><span class="line"><span class="comment">#7)重新配置master</span></span><br><span class="line">tr -d <span class="string">&#x27;\r&#x27;</span> &lt;<span class="regexp">/root/</span>soft<span class="regexp">/installk8sMaster.sh &gt; /</span>root<span class="regexp">/soft/i</span>nstallk8sMaster.sh_new.sh  &amp;&amp; chmod +x <span class="regexp">/root/</span>soft<span class="regexp">/*.sh &amp;&amp; /</span>root<span class="regexp">/soft/i</span>nstallk8sMaster.sh_new.sh configMaster</span><br><span class="line"><span class="comment"># 8)检查 master 初始化结果</span></span><br><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 9)获得 join命令参数 </span></span><br><span class="line">kubeadm token create --print-join-command</span><br><span class="line"></span><br><span class="line"><span class="comment">#10)安装Node:( (确保master 状态为ready 正常再操作node))（soft目录下installk8sNode.sh）</span></span><br><span class="line"><span class="comment">#需要修改aliyun镜像仓库地址，用户户名和密码，k8smaster ip,k8s node ip</span></span><br><span class="line">tr -d <span class="string">&#x27;\r&#x27;</span> &lt;<span class="regexp">/root/</span>soft<span class="regexp">/installk8sNode.sh &gt; /</span>root<span class="regexp">/soft/i</span>nstallk8sNode.sh_new.sh  &amp;&amp; chmod +x <span class="regexp">/root/</span>soft<span class="regexp">/*.sh &amp;&amp; /</span>root<span class="regexp">/soft/i</span>nstallk8sNode.sh_new.sh</span><br><span class="line"><span class="comment"># 11)只在 worker 节点执行 设置masterip 和apiserver.demo</span></span><br><span class="line">echo <span class="string">&quot;192.168.31.200 apiserver.demo&quot;</span> &gt;&gt; <span class="regexp">/etc/</span>hosts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 12)执行第9步： kubeadm token create --print-join-command 命令的输出 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 13)只在 master 节点执行 直至nodes ready状态 等待 3-10 分钟</span></span><br><span class="line">kubectl get nodes -o wide</span><br><span class="line"></span><br><span class="line"><span class="comment">#若一直没有ready失败则kubectl get pod -n kube-system pod是否是ready状态和running状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##14)在master安装Kubectl,helm</span></span><br><span class="line">tr -d <span class="string">&#x27;\r&#x27;</span> &lt;<span class="regexp">/root/</span>soft<span class="regexp">/installk8sMaster.sh &gt; /</span>root<span class="regexp">/soft/i</span>nstallk8sMaster.sh_new.sh  &amp;&amp; chmod +x <span class="regexp">/root/</span>soft<span class="regexp">/*.sh &amp;&amp; /</span>root<span class="regexp">/soft/i</span>nstallk8sMaster.sh_new.sh configKubectl</span><br><span class="line"></span><br><span class="line"><span class="comment">#15)安装ingress </span></span><br><span class="line">tr -d <span class="string">&#x27;\r&#x27;</span> &lt;<span class="regexp">/root/</span>soft<span class="regexp">/installk8sMaster.sh &gt; /</span>root<span class="regexp">/soft/i</span>nstallk8sMaster.sh_new.sh  &amp;&amp; chmod +x <span class="regexp">/root/</span>soft<span class="regexp">/*.sh &amp;&amp; /</span>root<span class="regexp">/soft/i</span>nstallk8sMaster.sh_new.sh installIngress</span><br><span class="line"></span><br><span class="line"><span class="comment"># 16)记下kubord token</span></span><br><span class="line">eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJvYXJkIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6Imt1Ym9hcmQtdXNlci10b2tlbi01OTk4ZiIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50Lm5hbWUiOiJrdWJvYXJkLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiJjMjMzM2Y2Mi00OTdlLTQwNGUtYmRmOS1kMWMwNjg4OWQwZWEiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3Vib2FyZDprdWJvYXJkLXVzZXIifQ.fGttYtIb3w6YrqYIrZodd7J0PXz5cCT8P7w7L_0V0ddCJY8gaEm-n5dTQurfigJuTcSUAzjJgHXAyp4sb-XZ8ma5jnnipZfW3543oiFo-gcbKwvVGPQYUqJ-UrCQlw_yW43iJ6Y7DzFPrVwfQ1ByfoUCDnEvDTLxG6yC3qNlzlVAsBMtreeUXqNl-xMIUAa-GQZL7gaddRiBQhmY96a67NFhqgiU8Lz_lv8NiQxAZT5ECDsoCl9-qzx7pm04I5W3tS2wPrew06Fqlpf0sxLWY__bd_SnTbFKlCGRA9_-h4uDZW9x3vn6FxfS-RT_o9Yd8GZYKr8I2P5cPZ8Xqx094w</span><br><span class="line"><span class="comment">#查看pod :kubectl get pod --all-namespaces </span></span><br><span class="line"><span class="comment"># host文件设置  192.168.31.200 kuboard.yanwen.com  （换成虚拟机主机ip）</span></span><br><span class="line"><span class="comment">#直至所有pod启动成功浏览器访问kuboard.yanwen.com 输入 &quot;脚本最打印后token&quot;</span></span><br><span class="line"><span class="comment">##--------------安装k8s master和k8s node ------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##----------------------------部署代码------------------------------ </span></span><br><span class="line"><span class="comment">#17）确保kubectl master node确保是否是readey</span></span><br><span class="line">kubectl get nodes -o wide</span><br><span class="line"><span class="comment">#代码master上传至： /root/springcloud/deployment</span></span><br><span class="line"><span class="comment">#18）执行部署</span></span><br><span class="line">tr -d <span class="string">&#x27;\r&#x27;</span> &lt;<span class="regexp">/root/</span>soft<span class="regexp">/installk8sMaster.sh &gt; /</span>root<span class="regexp">/soft/i</span>nstallk8sMaster.sh_new.sh  &amp;&amp; chmod +x <span class="regexp">/root/</span>soft<span class="regexp">/*.sh &amp;&amp; /</span>root<span class="regexp">/soft/i</span>nstallk8sMaster.sh_new.sh createSecret</span><br><span class="line"></span><br><span class="line">tr -d <span class="string">&#x27;\r&#x27;</span> &lt;<span class="regexp">/root/</span>soft<span class="regexp">/installk8sMaster.sh &gt; /</span>root<span class="regexp">/soft/i</span>nstallk8sMaster.sh_new.sh  &amp;&amp; chmod +x <span class="regexp">/root/</span>soft<span class="regexp">/*.sh &amp;&amp; /</span>root<span class="regexp">/soft/i</span>nstallk8sMaster.sh_new.sh deploy</span><br><span class="line"></span><br><span class="line"><span class="comment">#host设置：192.168.31.200  demodev.yanwen.com.cn eureka.intranet.local kuboard.yanwen.com demodev.intranet.local kuboard.yanwen.com （换成k8s master 节点 ip）</span></span><br><span class="line"></span><br><span class="line">demodev.yanwen.com.cn--ingress 配置 svc-nginx:<span class="number">80</span>, nginx访问http:<span class="regexp">//</span>svc-ing-gateway-gateway:<span class="number">6083</span></span><br><span class="line">demodev.intranet.local --ingress 配置http:<span class="regexp">//</span>svc-ing-gateway-gateway:<span class="number">6083</span></span><br><span class="line"></span><br><span class="line">eureka.intranet.local ingress 配置svc-ing-eureka-springclouddemoeureka:<span class="number">6080</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#19）测试连接：前往kuboard.yanwen.com 进行查看应用启动日志</span></span><br><span class="line"></span><br><span class="line">eureka: eureka.intranet.local </span><br><span class="line">gateway:</span><br><span class="line">http:<span class="regexp">//</span>demodev.yanwen.com.cn<span class="regexp">/searviceA/u</span>sers/<span class="number">111</span></span><br><span class="line">http:<span class="regexp">//</span>demodev.yanwen.com.cn<span class="regexp">/searviceB/u</span>sers/<span class="number">11</span></span><br><span class="line">内网</span><br><span class="line">http:<span class="regexp">//</span>demodev.intranet.local<span class="regexp">/searviceA/u</span>sers/<span class="number">111</span></span><br><span class="line">http:<span class="regexp">//</span>demodev.intranet.local<span class="regexp">/searviceB/u</span>sers/<span class="number">11</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">扩容searviceA 待启动后 </span><br><span class="line">kubectl get deployment --all-namespaces</span><br><span class="line">kubectl scale --replicas=<span class="number">2</span> deployments/rs-serviceclient -n springclouddemo</span><br><span class="line"></span><br><span class="line">kubectl scale --replicas=<span class="number">1</span> deployments/rs-serviceclient -n springclouddemo</span><br><span class="line"></span><br><span class="line">在访问 测试ribbon负载均衡组件</span><br><span class="line">http:<span class="regexp">//</span>demodev.yanwen.com.cn<span class="regexp">/searviceB/u</span>sers/<span class="number">11</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">helm <span class="keyword">delete</span> --pruge configserver </span><br><span class="line">helm <span class="keyword">delete</span> --pruge gateway </span><br><span class="line">helm <span class="keyword">delete</span> --pruge nginx </span><br><span class="line">helm <span class="keyword">delete</span> --pruge serviceclient </span><br><span class="line">helm <span class="keyword">delete</span> --pruge serviceclientb </span><br><span class="line">helm <span class="keyword">delete</span> --pruge springclouddemoeureka</span><br><span class="line">helm <span class="keyword">delete</span> --pruge svcingress </span><br><span class="line"></span><br><span class="line"><span class="comment"># 单独部署：</span></span><br><span class="line">  dir=<span class="regexp">/root/</span>springcloud/deployment</span><br><span class="line">cd <span class="variable">$dir</span></span><br><span class="line"></span><br><span class="line">tr -d <span class="string">&#x27;\r&#x27;</span> &lt;deploy.sh &gt; deploy_bew.sh  &amp;&amp; chmod +x <span class="variable">$dir</span><span class="regexp">/*.sh   &amp;&amp; ./</span>deploy_bew.sh  -Dver=<span class="number">1.0</span>.<span class="number">0</span> -Denv=ali_dev -Dnamespace=springclouddemo -Dname=springclouddemoeureka  eureka</span><br><span class="line">tr -d <span class="string">&#x27;\r&#x27;</span> &lt;deploy.sh &gt; deploy_bew.sh  &amp;&amp; chmod +x <span class="variable">$dir</span><span class="regexp">/*.sh  &amp;&amp; ./</span>deploy_bew.sh  -Dver=<span class="number">1.0</span>.<span class="number">0</span> -Denv=ali_dev -Dnamespace=springclouddemo  -Dname=configserver configServer </span><br><span class="line">tr -d <span class="string">&#x27;\r&#x27;</span> &lt;deploy.sh &gt; deploy_bew.sh  &amp;&amp; chmod +x <span class="variable">$dir</span><span class="regexp">/*.sh  &amp;&amp; ./</span>deploy_bew.sh  -Dver=<span class="number">1.0</span>.<span class="number">0</span> -Denv=ali_dev -Dnamespace=springclouddemo  -Dname=serviceclient ServiceClient</span><br><span class="line">tr -d <span class="string">&#x27;\r&#x27;</span> &lt;deploy.sh &gt; deploy_bew.sh   &amp;&amp; chmod +x <span class="variable">$dir</span><span class="regexp">/*.sh &amp;&amp; ./</span>deploy_bew.sh  -Dver=<span class="number">1.0</span>.<span class="number">0</span> -Denv=ali_dev -Dnamespace=springclouddemo  -Dname=serviceclientb ServiceClientB</span><br><span class="line">tr -d <span class="string">&#x27;\r&#x27;</span> &lt;deploy.sh &gt; deploy_bew.sh  &amp;&amp; chmod +x <span class="variable">$dir</span><span class="regexp">/*.sh  &amp;&amp; ./</span>deploy_bew.sh  -Dver=<span class="number">1.0</span>.<span class="number">0</span> -Denv=ali_dev -Dnamespace=springclouddemo  -Dname=svcingress ingress</span><br><span class="line"></span><br><span class="line">tr -d <span class="string">&#x27;\r&#x27;</span> &lt;deploy.sh &gt; deploy_bew.sh   &amp;&amp; chmod +x <span class="variable">$dir</span><span class="regexp">/*.sh &amp;&amp; ./</span>deploy_bew.sh  -Dver=<span class="number">1.0</span>.<span class="number">0</span> -Denv=ali_dev -Dnamespace=springclouddemo  -Dname=gateway gateway</span><br><span class="line">    tr -d <span class="string">&#x27;\r&#x27;</span> &lt;deploy.sh &gt; deploy_bew.sh  &amp;&amp; chmod +x <span class="variable">$dir</span><span class="regexp">/*.sh  &amp;&amp; ./</span>deploy_bew.sh  -Dver=<span class="number">1.16</span>.<span class="number">1</span> -Denv=ali_dev -Dnamespace=springclouddemo  -Dname=nginx nginx</span><br><span class="line">------------------------------使用阿里云镜像仓库----</span><br></pre></td></tr></table></figure><ul><li>eureka.intranet.local</li></ul><p><img src="/2022/09/03/%E5%BE%AE%E6%9C%8D/pasted-22.png" alt="eureka.intranet.local "></p><ul><li><a href="http://demodev.yanwen.com.cn/searviceA/users/111">http://demodev.yanwen.com.cn/searviceA/users/111</a></li></ul><p><img src="/2022/09/03/%E5%BE%AE%E6%9C%8D/pasted-23.png" alt="demodev.yanwen.com.cn"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes知识</title>
      <link href="/2022/08/22/K8S%E7%9F%A5%E8%AF%86/"/>
      <url>/2022/08/22/K8S%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是Kubernetes"><a href="#什么是Kubernetes" class="headerlink" title="什么是Kubernetes"></a>什么是Kubernetes</h1><ul><li><p>Kubernetes是Google 2014年创建管理的，是Google 10多年大规模容器管理技术Borg的开源版本。</p></li><li><p>Kubernetes（K8S）是Google开源的容器集群管理系统，其设计源于Google在容器编排方面积累的丰富经验，并结合社区创新的最佳实践。</p></li><li><p>K8S在Docker容器技术的基础之上，大大地提高了容器化部署应用简单高效。并且具备了完整的集群管理能力，例如服务发现、资源配额、缩容扩容、动态更新、持久化存储、监控、日志等，涵盖项目周期的各个环节。</p></li><li><p>经过这几年的快速发展，K8S已经成为建设容器云平台的首选方案</p></li><li><p>Kubernetes的名字来自希腊语，意思是“舵手” 或 “领航员”。K8s是将8个字母“ubernete”替换为“8”的缩写。</p></li></ul><h2 id="Kubernetes与docker联系"><a href="#Kubernetes与docker联系" class="headerlink" title="Kubernetes与docker联系"></a>Kubernetes与docker联系</h2><ul><li>Docker是一个容器引擎，用于运行容器，Kubernetes是一个容器编排系统，不具备容器引擎功能，相比Docker是一个更高级封装，而他们在一起堪称珠联璧合，一起搞大事！如图：</li></ul><p><img src="/2022/08/22/K8S%E7%9F%A5/pasted-0.png" alt="Kubernetes与docker联系"></p><h1 id="Kubernetes-介绍"><a href="#Kubernetes-介绍" class="headerlink" title="Kubernetes 介绍"></a>Kubernetes 介绍</h1><ul><li><p>存储编排<br>Kubernetes 允许您自动挂载您选择的存储系统，例如本地存储、公共云提供商、NFS等。</p></li><li><p>应用程序健康检查<br>容器内服务可能进场阻塞无法处理请求，可以设置监控检查策略保证 应用健壮性</p></li><li><p>复制应用程序实例<br>控制器维护着pod的副本数量，保证一个Pod或一组同类的Pod数量始终可用</p></li><li><p>弹性伸缩<br>根据设定的指标（CPU利用率）自动缩放Pod副本数量</p></li><li><p>服务发现<br>使用环境变量或DNS服务插件保证容器中程序发现Pod入口访问地址</p></li><li><p>负载均衡<br>一组Pod副本分配一个私有的集群IP地址，负载均衡转发请求到后端容器。在集群里内部其他Pod可通过这个ClusterIp访问应用</p></li><li><p>滚动更新<br>更新服务不中断，一次更新一个pod</p></li><li><p>服务编排<br>通过文件描述部署服务，使得应用程序部署变得更高效</p></li><li><p>资源监控<br>Node节点组件集成cAdvisor资源收集工具，可通过Heapster汇总整个集群节点资源数据，然后存储到InFluxDB时序数据库，再由Grafana展示</p></li><li><p>提供认证和授权<br>支持角色访问权限（RBAC）</p></li><li><p>日志访问<br>可以查询容器运行日志</p></li></ul><h2 id="Kubernetes不是什么？"><a href="#Kubernetes不是什么？" class="headerlink" title="Kubernetes不是什么？"></a>Kubernetes不是什么？</h2><ul><li><p>Kubernetes并不是传统的PaaS（平台即服务）系统。</p></li><li><p>Kubernetes不限制支持应用的类型，不限制应用框架。不限制受支持的语言runtimes (例如, Java, Python, Ruby)，满足12-factor applications 。不区分 “apps” 或者“services”。 Kubernetes支持不同负载应用，包括有状态、无状态、数据处理类型的应用。只要这个应用可以在容器里运行，那么就能很好的运行在Kubernetes上。</p></li><li><p>Kubernetes不提供中间件（如message buses）、数据处理框架（如Spark）、数据库(如Mysql)或者集群存储系统(如Ceph)作为内置服务。但这些应用都可以运行在Kubernetes上面。</p></li><li><p>Kubernetes不部署源码不编译应用。持续集成的 (CI)工作流方面，不同的用户有不同的需求和偏好的区域，因此，我们提供分层的 CI工作流，但并不定义它应该如何工作。</p></li><li><p>Kubernetes允许用户选择自己的日志、监控和报警系统。</p></li><li><p>Kubernetes不提供或授权一个全面的应用程序配置 语言&#x2F;系统（例如，jsonnet）。</p></li><li><p>Kubernetes不提供任何机器配置、维护、管理或者自修复系统。</p></li></ul><h1 id="Kubernetes组件"><a href="#Kubernetes组件" class="headerlink" title="Kubernetes组件"></a>Kubernetes组件</h1><p><img src="/2022/08/22/K8S%E7%9F%A5/pasted-1.png" alt="Kubernetes组件"></p><h2 id="Kubernetes组件–Master-组件"><a href="#Kubernetes组件–Master-组件" class="headerlink" title="Kubernetes组件–Master 组件"></a>Kubernetes组件–Master 组件</h2><ul><li>Master 组件提供集群的控制平面<br>Master 组件对集群进行全局决策（例如，调度），并检测和响应集群事件（例如，当不满足部署的 replicas 字段时，启动新的 pod）。</li><li>kube-apiserver<br>主节点上负责提供 Kubernetes API 服务的组件；它是 Kubernetes 控制面的前端。</li><li>etcd<br>etcd 是兼具一致性和高可用性的键值数据库，可以作为保存 Kubernetes 所有集群数据的后台数据库。</li><li>kube-scheduler<br>主节点上的组件，该组件监视那些新创建的未指定运行节点的 Pod，并选择节点让 Pod 在上面运行。<br>调度决策考虑的因素包括单个 Pod 和 Pod 集合的资源需求、硬件&#x2F;软件&#x2F;策略约束、亲和性和反亲和性规范、数据位置、工作负载间的干扰和最后时限。</li><li>kube-controller-manager<br>在主节点上运行控制器的组件。<br>从逻辑上讲，每个控制器都是一个单独的进程，但是为了降低复杂性，它们都被编译到同一个可执行文件，并在一个进程中运行。<br>这些控制器包括:<ul><li>节点控制器（Node Controller）: 负责在节点出现故障时进行通知和响应。</li><li>副本控制器（Replication Controller）: 负责为系统中的每个副本控制器对象维护正确数量的 Pod。</li><li>端点控制器（Endpoints Controller）: 填充端点(Endpoints)对象(即加入 Service 与 Pod)。</li><li>服务帐户和令牌控制器（Service Account &amp; Token Controllers）: 为新的命名空间创建默认帐户和 API 访问令牌</li></ul></li></ul><p><img src="/2022/08/22/K8S%E7%9F%A5/pasted-2.png" alt="kube-controller-manager"></p><ul><li>容器运行环境(Container Runtime)<br>容器运行环境是负责运行容器的软件。–docker</li></ul><h2 id="Kubernetes组件–Node-组件"><a href="#Kubernetes组件–Node-组件" class="headerlink" title="Kubernetes组件–Node 组件"></a>Kubernetes组件–Node 组件</h2><ul><li><p>kubelet<br>一个在集群中每个节点上运行的代理。它保证容器都运行在 Pod 中。<br>kubelet 接收一组通过各类机制提供给它的 PodSpecs，确保这些 PodSpecs 中描述的容器处于运行状态且健康。kubelet 不会管理不是由 Kubernetes 创建的容器。</p></li><li><p>kube-proxy<br>kube-proxy 是集群中每个节点上运行的网络代理,实现 Kubernetes Service 概念的一部分。<br>kube-proxy 维护节点上的网络规则。这些网络规则允许从集群内部或外部的网络会话与 Pod 进行网络通信。<br>如果有 kube-proxy 可用，它将使用操作系统数据包过滤层。否则，kube-proxy 会转发流量本身。</p></li><li><p>容器运行环境(Container Runtime)<br>容器运行环境是负责运行容器的软件。–docker</p></li></ul><h1 id="Kubernetes-核心对象概念"><a href="#Kubernetes-核心对象概念" class="headerlink" title="Kubernetes 核心对象概念"></a>Kubernetes 核心对象概念</h1><ul><li><p>pod<br>Pod是最小部署 单元，一个Pod有一个或多个容器组成，Pod中容器共享存储和网站，在同一个DOcker主机上运行</p></li><li><p>Service<br>Service一个应用服务抽象，定义了Pod逻辑集合和访问这个Pod集成的策略<br>Service代理Pod集合对外表现是为一个访问入口，分配一个集群Ip地址，来自这个Ip的请求将负载均衡转发后端Pod中容器<br>Servie 通过Label Selector 选择一组Pod提供服务</p></li><li><p>Volume<br> 数据卷，供于Pod使用的数据</p></li><li><p>Namespace<br> 命名空间将对象逻辑上分配到不同Namespace,可以不同项目、用户等区分管理，从而实现多租户。命名空间也成为虚拟集群</p></li><li><p>Label<br> 标签用于区分对象（比如Pod service）,键&#x2F;值对存在，每个对象可以有多个标签，通过标签关联对象</p></li><li><p>ReplicaSet<br>下一代Replication Controller，确保任何给定时间指定Pod副本数量，并提供声明式更新等功能<br>RC与RS唯一区别就是Label Selector支持不同，RS支持新的基于集合的标签，RC仅支持基于等式标签</p></li><li><p>Deployment<br>是更高层次的PAI对象，它管理Replica和Pod，并提供声明式更新等功能<br>官方建议使用Deployment管理ReplicaSet ,而不是直接使用RelicaSet，这就意味着可能永远不需要直接操作ReplicaSet对象</p></li><li><p>Job<br>一次性任务，运行完成后Pod销毁。不再重新启动部署新容器，还可以任务定时运行</p></li><li><p>StatefulSet<br>适合持久性的应用程序，有唯一的网络标识符（IP）,持久存储，有序的部署、扩展、删除和滚动更新</p></li><li><p>DaementSet<br>DaementSet确保所有（或一些）节点运行同一个Pod,当节点加入kubernets集群中，Pod会调到该节点上运行。当节点集群中移除，DaementSet的Pod会被删除，删除DaemonSet会清理它所有创建的Pod</p></li></ul><h1 id="Kubernetes-安装"><a href="#Kubernetes-安装" class="headerlink" title="Kubernetes 安装"></a>Kubernetes 安装</h1><ul><li>minikube<br>Minikube是一个工具，可以在本地快速运行一个单点的Kubernetes，尝试Kubernetes或日常开发的用户使用。不能用于生产环境。<br>官方地址：<a href="https://kubernetes.io/docs/setup/minikube/">https://kubernetes.io/docs/setup/minikube/</a></li><li>kubeadm<br>Kubeadm也是一个工具，提供kubeadm init和kubeadm join，用于快速部署Kubernetes集群。<br>官方地址：<a href="https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm/">https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm/</a></li><li>二进制包<br>从官方下载发行版的二进制包，手动部署每个组件，组成Kubernetes集群。</li></ul><h2 id="虚拟机安装centos"><a href="#虚拟机安装centos" class="headerlink" title="虚拟机安装centos"></a>虚拟机安装centos</h2><ul><li>k8s matser: 2核cpu 系统 cenots 7.9 硬盘20g 内存2048m  ip:192.168.31.59 docker版本:18.09.7</li><li>k8s node :2核cpu 系统 cenots 7.9 硬盘20g 内存2048m  ip:192.168.31.181 docker版本:18.09.7</li></ul><h2 id="k8s-master-安装k8s-2-15版本"><a href="#k8s-master-安装k8s-2-15版本" class="headerlink" title="k8s master 安装k8s 2.15版本"></a>k8s master 安装k8s 2.15版本</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Kubernetes 安装部署</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Kubernetes --master</span></span><br><span class="line"><span class="comment"># ipaddr 确认主机ip</span></span><br><span class="line"><span class="comment"># 在 master 节点和 worker 节点都要执行</span></span><br><span class="line">cat <span class="regexp">/etc/</span>redhat-release</span><br><span class="line"><span class="comment"># 此处 hostname 的输出将会是该机器在 Kubernetes 集群中的节点名字</span></span><br><span class="line"><span class="comment"># 不能使用 localhost 作为节点的名字</span></span><br><span class="line">hostname</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请使用 lscpu 命令，核对 CPU 信息</span></span><br><span class="line"><span class="comment"># Architecture: x86_64    本安装文档不支持 arm 架构</span></span><br><span class="line"><span class="comment"># CPU(s):       2         CPU 内核数量不能低于 2</span></span><br><span class="line">lscpu</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 以下脚本在master执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 hostname</span></span><br><span class="line">hostnamectl set-hostname k8s-master</span><br><span class="line"><span class="comment"># 查看修改结果</span></span><br><span class="line">hostnamectl status</span><br><span class="line"><span class="comment"># 设置 hostname 解析</span></span><br><span class="line">echo <span class="string">&quot;127.0.0.1   $(hostname)&quot;</span> &gt;&gt; <span class="regexp">/etc/</span>hosts</span><br><span class="line">cat <span class="regexp">/etc/</span>hosts</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##安装docker:</span></span><br><span class="line"><span class="comment">##卸载旧版本</span></span><br><span class="line"> yum remove -y docker \</span><br><span class="line">docker-client \</span><br><span class="line">docker-client-latest \</span><br><span class="line">docker-common \</span><br><span class="line">docker-latest \</span><br><span class="line">docker-latest-logrotate \</span><br><span class="line">docker-logrotate \</span><br><span class="line">docker-selinux \</span><br><span class="line">docker-engine-selinux \</span><br><span class="line">docker-engine</span><br><span class="line"></span><br><span class="line"><span class="comment">##设置yum docker repository</span></span><br><span class="line"> yum install -y yum-utils  device-mapper-persistent-data lvm2</span><br><span class="line"></span><br><span class="line">  yum-config-manager --add-repo https:<span class="regexp">//</span>download.docker.com<span class="regexp">/linux/</span>centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="comment">##安装并启动 docker</span></span><br><span class="line"> yum install -y docker-ce-<span class="number">18.09</span>.<span class="number">7</span> docker-ce-cli-<span class="number">18.09</span>.<span class="number">7</span> containerd.io</span><br><span class="line"> systemctl enable docker</span><br><span class="line"> systemctl start docker</span><br><span class="line"></span><br><span class="line"> <span class="comment"># 查看docker版本</span></span><br><span class="line">docker version</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 nfs-utils</span></span><br><span class="line">yum install -y nfs-utils</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置K8S的yum源</span></span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF &gt; <span class="regexp">/etc/yum</span>.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/kubernetes/yum</span><span class="regexp">/repos/</span>kubernetes-el7-x86_64</span><br><span class="line">enabled=<span class="number">1</span></span><br><span class="line">gpgcheck=<span class="number">0</span></span><br><span class="line">repo_gpgcheck=<span class="number">0</span></span><br><span class="line">gpgkey=http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/kubernetes/yum</span><span class="regexp">/doc/yum</span>-key.gpg</span><br><span class="line">       http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/kubernetes/yum</span><span class="regexp">/doc/</span>rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line"> </span><br><span class="line"><span class="comment">#关闭 防火墙、SeLinux、swap</span></span><br><span class="line"></span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br><span class="line"></span><br><span class="line">setenforce <span class="number">0</span></span><br><span class="line">sed -i <span class="string">&quot;s/SELINUX=enforcing/SELINUX=disabled/g&quot;</span> <span class="regexp">/etc/</span>selinux/config</span><br><span class="line"></span><br><span class="line">swapoff -a</span><br><span class="line">yes | cp <span class="regexp">/etc/</span>fstab <span class="regexp">/etc/</span>fstab_bak</span><br><span class="line">cat <span class="regexp">/etc/</span>fstab_bak |grep -v swap &gt; <span class="regexp">/etc/</span>fstab</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改 /etc/sysctl.conf</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vi <span class="regexp">/etc/</span>sysctl.conf</span><br><span class="line"><span class="comment">## 添加以下内容</span></span><br><span class="line">net.ipv4.ip_forward = <span class="number">1</span></span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = <span class="number">1</span></span><br><span class="line">net.bridge.bridge-nf-call-iptables = <span class="number">1</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> <span class="comment"># 令以上内容执行生效</span></span><br><span class="line">sysctl -p</span><br><span class="line"></span><br><span class="line"><span class="comment">## 安装kubelet、kubeadm、kubectl</span></span><br><span class="line">yum install -y kubelet-<span class="number">1.15</span>.<span class="number">1</span> kubeadm-<span class="number">1.15</span>.<span class="number">1</span> kubectl-<span class="number">1.15</span>.<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 修改docker Cgroup Driver为systemd</span></span><br><span class="line"> vi <span class="regexp">/usr/</span>lib<span class="regexp">/systemd/</span>system/docker.service</span><br><span class="line"><span class="comment">## 在ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock添加</span></span><br><span class="line"> --exec-opt native.cgroupdriver=systemd</span><br><span class="line"></span><br><span class="line"><span class="comment">##设置 docker 镜像</span></span><br><span class="line">mkdir -p <span class="regexp">/etc/</span>docker</span><br><span class="line">tee <span class="regexp">/etc/</span>docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://hrei34jl.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"> <span class="comment"># 重启 docker，并启动 kubelet</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br><span class="line">systemctl enable kubelet &amp;&amp; systemctl start kubelet</span><br><span class="line"></span><br><span class="line"><span class="comment">## 初始化 master 节点 需要换成物理网络ip</span></span><br><span class="line"><span class="comment"># 配置 apiserver.demo 的域名</span></span><br><span class="line">echo <span class="string">&quot;192.168.31.59 apiserver.demo&quot;</span> &gt;&gt; <span class="regexp">/etc/</span>hosts</span><br><span class="line"></span><br><span class="line"><span class="comment">##创建 ./kubeadm-config.yaml</span></span><br><span class="line">cat &lt;&lt;EOF &gt; ./kubeadm-config.yaml</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1beta1</span><br><span class="line">kind: ClusterConfiguration</span><br><span class="line">kubernetesVersion: v1.<span class="number">15.1</span></span><br><span class="line">imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers</span><br><span class="line">controlPlaneEndpoint: <span class="string">&quot;apiserver.demo:6443&quot;</span></span><br><span class="line">networking:</span><br><span class="line">  podSubnet: <span class="string">&quot;10.100.0.1/20&quot;</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment">## 初始化 apiserver  根据您服务器网速的情况，您需要等候 1 - 10 分钟</span></span><br><span class="line">kubeadm init --config=kubeadm-config.yaml --upload-certs</span><br><span class="line"></span><br><span class="line">rm -rf <span class="regexp">/root/</span>.kube/</span><br><span class="line">mkdir <span class="regexp">/root/</span>.kube/</span><br><span class="line">cp -i <span class="regexp">/etc/</span>kubernetes<span class="regexp">/admin.conf /</span>root<span class="regexp">/.kube/</span>config</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">##安装 calico</span></span><br><span class="line"></span><br><span class="line">kubectl apply -f https:<span class="regexp">//</span>docs.projectcalico.org<span class="regexp">/v3.6/g</span>etting-started<span class="regexp">/kubernetes/i</span>nstallation<span class="regexp">/hosted/</span>kubernetes-datastore<span class="regexp">/calico-networking/</span><span class="number">1.7</span>/calico.yaml</span><br><span class="line"><span class="comment">##等待calico安装就绪：</span></span><br><span class="line"><span class="comment"># 可在 master 节点执行  执行如下命令，等待 3-10 分钟，直到所有的容器组处于 Running 状态</span></span><br><span class="line">watch kubectl get pod -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查 master 初始化结果</span></span><br><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure><p>安装成功：</p><p><img src="/2022/08/22/K8S%E7%9F%A5/pasted-4.png" alt="kubectl get pod -n kube-system"></p><h2 id="k8s-node-安装k8s-2-15版本"><a href="#k8s-node-安装k8s-2-15版本" class="headerlink" title="k8s node 安装k8s 2.15版本"></a>k8s node 安装k8s 2.15版本</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">##以下脚本在node节点执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 master 节点和 worker 节点都要执行</span></span><br><span class="line">cat <span class="regexp">/etc/</span>redhat-release</span><br><span class="line"><span class="comment"># 此处 hostname 的输出将会是该机器在 Kubernetes 集群中的节点名字</span></span><br><span class="line"><span class="comment"># 不能使用 localhost 作为节点的名字</span></span><br><span class="line">hostname</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请使用 lscpu 命令，核对 CPU 信息</span></span><br><span class="line"><span class="comment"># Architecture: x86_64    本安装文档不支持 arm 架构</span></span><br><span class="line"><span class="comment"># CPU(s):       2         CPU 内核数量不能低于 2</span></span><br><span class="line">lscpu</span><br><span class="line"><span class="comment"># 修改 hostname</span></span><br><span class="line">hostnamectl set-hostname k8s-node </span><br><span class="line"><span class="comment"># 查看修改结果</span></span><br><span class="line">hostnamectl status</span><br><span class="line"><span class="comment"># 设置 hostname 解析</span></span><br><span class="line">echo <span class="string">&quot;127.0.0.1   $(hostname)&quot;</span> &gt;&gt; <span class="regexp">/etc/</span>hosts</span><br><span class="line">cat <span class="regexp">/etc/</span>hosts</span><br><span class="line"></span><br><span class="line"><span class="comment">##安装docker:</span></span><br><span class="line"><span class="comment">##卸载旧版本</span></span><br><span class="line"> yum remove -y docker \</span><br><span class="line">docker-client \</span><br><span class="line">docker-client-latest \</span><br><span class="line">docker-common \</span><br><span class="line">docker-latest \</span><br><span class="line">docker-latest-logrotate \</span><br><span class="line">docker-logrotate \</span><br><span class="line">docker-selinux \</span><br><span class="line">docker-engine-selinux \</span><br><span class="line">docker-engine</span><br><span class="line"></span><br><span class="line"><span class="comment">##设置yum docker repository</span></span><br><span class="line"> yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"></span><br><span class="line">yum-config-manager --add-repo https:<span class="regexp">//</span>download.docker.com<span class="regexp">/linux/</span>centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="comment">##安装并启动 docker</span></span><br><span class="line"> yum install -y docker-ce-<span class="number">18.09</span>.<span class="number">7</span> docker-ce-cli-<span class="number">18.09</span>.<span class="number">7</span> containerd.io</span><br><span class="line"> systemctl enable docker</span><br><span class="line"> systemctl start docker</span><br><span class="line"></span><br><span class="line"> <span class="comment"># 查看docker版本</span></span><br><span class="line">docker version</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 nfs-utils</span></span><br><span class="line">yum install -y nfs-utils</span><br><span class="line"><span class="comment">#配置K8S的yum源</span></span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF &gt; <span class="regexp">/etc/yum</span>.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/kubernetes/yum</span><span class="regexp">/repos/</span>kubernetes-el7-x86_64</span><br><span class="line">enabled=<span class="number">1</span></span><br><span class="line">gpgcheck=<span class="number">0</span></span><br><span class="line">repo_gpgcheck=<span class="number">0</span></span><br><span class="line">gpgkey=http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/kubernetes/yum</span><span class="regexp">/doc/yum</span>-key.gpg</span><br><span class="line">       http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/kubernetes/yum</span><span class="regexp">/doc/</span>rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line"> </span><br><span class="line"><span class="comment">#关闭 防火墙、SeLinux、swap</span></span><br><span class="line"></span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br><span class="line"></span><br><span class="line">setenforce <span class="number">0</span></span><br><span class="line">sed -i <span class="string">&quot;s/SELINUX=enforcing/SELINUX=disabled/g&quot;</span> <span class="regexp">/etc/</span>selinux/config</span><br><span class="line"></span><br><span class="line">swapoff -a</span><br><span class="line">yes | cp <span class="regexp">/etc/</span>fstab <span class="regexp">/etc/</span>fstab_bak</span><br><span class="line">cat <span class="regexp">/etc/</span>fstab_bak |grep -v swap &gt; <span class="regexp">/etc/</span>fstab</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改 /etc/sysctl.conf</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vi <span class="regexp">/etc/</span>sysctl.conf</span><br><span class="line"><span class="comment">## 添加以下内容</span></span><br><span class="line">net.ipv4.ip_forward = <span class="number">1</span></span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = <span class="number">1</span></span><br><span class="line">net.bridge.bridge-nf-call-iptables = <span class="number">1</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> <span class="comment"># 令以上内容执行生效</span></span><br><span class="line">sysctl -p</span><br><span class="line"></span><br><span class="line"><span class="comment">## 安装kubelet、kubeadm、kubectl</span></span><br><span class="line">yum install -y kubelet-<span class="number">1.15</span>.<span class="number">1</span> kubeadm-<span class="number">1.15</span>.<span class="number">1</span> kubectl-<span class="number">1.15</span>.<span class="number">1</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">## 修改docker Cgroup Driver为systemd</span></span><br><span class="line"> vi <span class="regexp">/usr/</span>lib<span class="regexp">/systemd/</span>system/docker.service</span><br><span class="line"><span class="comment">## 在ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock添加</span></span><br><span class="line"> --exec-opt native.cgroupdriver=systemd</span><br><span class="line"></span><br><span class="line"><span class="comment">##设置 docker 镜像</span></span><br><span class="line">mkdir -p <span class="regexp">/etc/</span>docker</span><br><span class="line"> tee <span class="regexp">/etc/</span>docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://hrei34jl.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"> <span class="comment"># 重启 docker，并启动 kubelet</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br><span class="line">systemctl enable kubelet &amp;&amp; systemctl start kubelet</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##针对所有的 worker 节点执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只在 worker 节点执行 设置masterip</span></span><br><span class="line">echo <span class="string">&quot;192.168.31.59  apiserver.demo&quot;</span> &gt;&gt; <span class="regexp">/etc/</span>hosts</span><br><span class="line"><span class="comment"># 到k8s master 主机执行获得 join命令参数 待</span></span><br><span class="line">kubeadm token create --print-join-command</span><br><span class="line"></span><br><span class="line">获取到命令复制至k8s node执行： kubeadm join apiserver.demo:<span class="number">6443</span> --token <span class="number">1</span>rgjij.n5a0x5mma7v7cylj     --discovery-token-ca-cert-hash sha256:ee62f5d762d73b4dde5abc2dc2ae0dfb69cd0e19ab8587f1b257e60f9aa648d5 </span><br><span class="line"></span><br><span class="line">可以在k8s master执行：</span><br><span class="line">watch kubectl get pod -n kube-system</span><br><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure><p>node ready:</p><p><img src="/2022/08/22/K8S%E7%9F%A5/pasted-3.png" alt="kubectl get nodes"></p><h1 id="使用kubectl-访问Kubernetes集群"><a href="#使用kubectl-访问Kubernetes集群" class="headerlink" title="使用kubectl 访问Kubernetes集群"></a>使用kubectl 访问Kubernetes集群</h1><p>以下后续kubectl命令在k8s master下执行kubectl</p><ul><li>kubectl version<br><img src="/2022/08/22/K8S%E7%9F%A5/pasted-5.png" alt="kubectl version"></li></ul><h2 id="kubectl-deploy-nginx"><a href="#kubectl-deploy-nginx" class="headerlink" title="kubectl deploy nginx"></a>kubectl deploy nginx</h2><ul><li>kubectl run nginx(默认namespace:default)<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">run</span> nginx <span class="attribute">--image</span>=nginx <span class="attribute">--replicas</span>=3</span><br></pre></td></tr></table></figure><img src="/2022/08/22/K8S%E7%9F%A5/pasted-6.png" alt="kubectl run nginx "></li><li>查看pod 列表<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="keyword">get</span> pod -o wide -n <span class="keyword">default</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="/2022/08/22/K8S%E7%9F%A5/pasted-7.png" alt="图片/2022/08/22/K8S知/pasted-7.png"></p><ul><li>查看pod详细信息<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="keyword">describe</span> pod  nginx<span class="number">-7</span>bb7cd8db5<span class="operator">-</span>kjfm4 <span class="operator">-</span>n <span class="keyword">default</span></span><br></pre></td></tr></table></figure><img src="/2022/08/22/K8S%E7%9F%A5/pasted-8.png" alt="kubectl describe pod "></li><li>映射端口<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl expose deployment nginx <span class="attribute">--port</span>=88 <span class="attribute">--target-port</span>=80 <span class="attribute">--type</span>=NodePort -n default</span><br></pre></td></tr></table></figure></li><li>查看service<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="keyword">get</span> svc -o wide -n <span class="keyword">default</span></span><br></pre></td></tr></table></figure><img src="/2022/08/22/K8S%E7%9F%A5/pasted-9.png" alt="查看service"></li><li><a href="http://192.168.31.59:32125/">http://192.168.31.59:32125</a><br><img src="/2022/08/22/K8S%E7%9F%A5/pasted-10.png" alt="访问"></li><li>查看pod日志<figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">log</span> -f  nginx<span class="number">-7</span>bb7cd8db5-kjfm4 -n <span class="literal">default</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="/2022/08/22/K8S%E7%9F%A5/pasted-14.png" alt="图片/2022/08/22/K8S知/pasted-14.png"></p><ul><li>删除deploy<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="keyword">delete</span> deployment nginx -n <span class="keyword">default</span></span><br><span class="line">kubectl <span class="keyword">delete</span> svc nginx -n <span class="keyword">default</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="kubectl-管理Kubernetes-命令"><a href="#kubectl-管理Kubernetes-命令" class="headerlink" title="kubectl 管理Kubernetes 命令"></a>kubectl 管理Kubernetes 命令</h2><p><img src="/2022/08/22/K8S%E7%9F%A5/pasted-11.png" alt="kubectl 管理Kubernetes 命令1"></p><p><img src="/2022/08/22/K8S%E7%9F%A5/pasted-12.png" alt="kubectl 管理Kubernetes 命令2"></p><p><img src="/2022/08/22/K8S%E7%9F%A5/pasted-13.png" alt="kubectl 管理Kubernetes 命令3"></p><p>##部署一个kuboard<br>kubectl apply -f <a href="https://kuboard.cn/install-script/kuboard.yaml">https://kuboard.cn/install-script/kuboard.yaml</a></p><h1 id="安装Kuboard"><a href="#安装Kuboard" class="headerlink" title="安装Kuboard"></a>安装Kuboard</h1><p>Kuboard 是 Kubernetes 的一款图形化管理界面。</p><p><a href="https://kuboard.cn/learning/">https://kuboard.cn/learning/</a></p><ul><li><p>安装命令</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https:<span class="regexp">//</span>kuboard.cn<span class="regexp">/install-script/</span>kuboard.yaml</span><br></pre></td></tr></table></figure></li><li><p>执行命令 获取登录token</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n kube-system get secret <span class="constructor">$(<span class="params">kubectl</span> -<span class="params">n</span> <span class="params">kube</span>-<span class="params">system</span> <span class="params">get</span> <span class="params">secret</span> | <span class="params">grep</span> <span class="params">kuboard</span>-<span class="params">user</span> | <span class="params">awk</span> &#x27;&#123;<span class="params">print</span> $1&#125;&#x27;)</span> -o go-template=&#x27;&#123;&#123;.data.token&#125;&#125;&#x27; <span class="pattern-match">| base64 -d</span></span><br></pre></td></tr></table></figure></li><li><p>访问:<a href="http://192.168.31.59:32567/dashboard">http://192.168.31.59:32567/dashboard</a><br>(使用master主机ip 访问32567端口)<br><img src="/2022/08/22/K8S%E7%9F%A5/pasted-15.png" alt="kuboard"></p></li><li><p>使用第二步获取token进行登录</p></li></ul><p><img src="/2022/08/22/K8S%E7%9F%A5/pasted-16.png" alt="kuboard界面"></p><h1 id="YAML文件部署-滚动更新-、回滚，弹性伸缩"><a href="#YAML文件部署-滚动更新-、回滚，弹性伸缩" class="headerlink" title="YAML文件部署(滚动更新 、回滚，弹性伸缩)"></a>YAML文件部署(滚动更新 、回滚，弹性伸缩)</h1><ul><li>nginx .yaml<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">nginx:1.15</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-service-nodeport</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nginx</span></span><br></pre></td></tr></table></figure></li><li>在k8s master执行 启动nginx:1.15 ，3个实例<figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">apply</span> -f nginx.yaml --<span class="built_in">record</span></span><br></pre></td></tr></table></figure></li><li>新开一个终端：<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watch kubectl <span class="built_in">get</span> pod -o wide  </span><br></pre></td></tr></table></figure></li><li>弹性伸缩<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl scale <span class="attribute">--replicas</span>=5 deployments/nginx</span><br><span class="line">kubectl scale <span class="attribute">--replicas</span>=10 deployments/nginx</span><br><span class="line">kubectl scale <span class="attribute">--replicas</span>=2 deployments/nginx</span><br></pre></td></tr></table></figure></li><li>滚动更新<br>nginx16  镜像nginx:1.16<br>nginx17 镜像nginx:1.17<figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">apply</span> -f nginx16.yaml --<span class="built_in">record</span></span><br><span class="line">kubectl <span class="built_in">apply</span> -f nginx17.yaml --<span class="built_in">record</span></span><br></pre></td></tr></table></figure></li><li>列出版本<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl rollout <span class="built_in">history</span> deployment nginx</span><br></pre></td></tr></table></figure></li></ul><p><img src="/2022/08/22/K8S%E7%9F%A5/pasted-17.png" alt="列出版本"></p><ul><li>回滚版本<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl rollout undo deployment nginx <span class="attribute">--to-revision</span>=2</span><br></pre></td></tr></table></figure></li><li>删除nginx<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="keyword">delete</span> -f nginx16.yaml</span><br></pre></td></tr></table></figure></li></ul><h1 id="yaml详解"><a href="#yaml详解" class="headerlink" title="yaml详解"></a>yaml详解</h1><h2 id="deployment-yaml-详解"><a href="#deployment-yaml-详解" class="headerlink" title="deployment.yaml 详解"></a>deployment.yaml 详解</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span>   <span class="comment">#接口版本</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span>                 <span class="comment">#接口类型</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cango-demo</span>               <span class="comment">#Deployment名称</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">cango-prd</span>           <span class="comment">#命名空间</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">cango-demo</span>              <span class="comment">#标签</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">strategy:</span></span><br><span class="line">    <span class="attr">rollingUpdate:</span>  <span class="comment">##由于replicas为3,则整个升级,pod个数在2-4个之间</span></span><br><span class="line">      <span class="attr">maxSurge:</span> <span class="number">1</span>      <span class="comment">#滚动升级时会先启动1个pod</span></span><br><span class="line">      <span class="attr">maxUnavailable:</span> <span class="number">1</span> <span class="comment">#滚动升级时允许的最大Unavailable的pod个数</span></span><br><span class="line">  <span class="attr">template:</span>         </span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">cango-demo</span>  <span class="comment">#模板名称必填</span></span><br><span class="line">    <span class="attr">sepc:</span> <span class="comment">#定义容器模板，该模板可以包含多个容器</span></span><br><span class="line">      <span class="attr">containers:</span>                                                                   </span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cango-demo</span>                                                           <span class="comment">#镜像名称</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">swr.cn-east-2.myhuaweicloud.com/cango-prd/cango-demo:0.0.1-SNAPSHOT</span> <span class="comment">#镜像地址</span></span><br><span class="line">          <span class="attr">command:</span> [ <span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;cat /etc/config/path/to/special-key&quot;</span> ]    <span class="comment">#启动命令</span></span><br><span class="line">          <span class="attr">args:</span>                                                                <span class="comment">#启动参数</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&#x27;-storage.local.retention=$(STORAGE_RETENTION)&#x27;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&#x27;-storage.local.memory-chunks=$(STORAGE_MEMORY_CHUNKS)&#x27;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&#x27;-config.file=/etc/prometheus/prometheus.yml&#x27;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&#x27;-alertmanager.url=http://alertmanager:9093/alertmanager&#x27;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&#x27;-web.external-url=$(EXTERNAL_URL)&#x27;</span></span><br><span class="line">    <span class="comment">#如果command和args均没有写，那么用Docker默认的配置。</span></span><br><span class="line">    <span class="comment">#如果command写了，但args没有写，那么Docker默认的配置会被忽略而且仅仅执行.yaml文件的command（不带任何参数的）。</span></span><br><span class="line">    <span class="comment">#如果command没写，但args写了，那么Docker默认配置的ENTRYPOINT的命令行会被执行，但是调用的参数是.yaml中的args。</span></span><br><span class="line">    <span class="comment">#如果如果command和args都写了，那么Docker默认的配置被忽略，使用.yaml的配置。</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span>  <span class="comment">#如果不存在则拉取</span></span><br><span class="line">          <span class="attr">livenessProbe:</span>       <span class="comment">#表示container是否处于live状态。如果LivenessProbe失败，LivenessProbe将会通知kubelet对应的container不健康了。随后kubelet将kill掉container，并根据RestarPolicy进行进一步的操作。默认情况下LivenessProbe在第一次检测之前初始化值为Success，如果container没有提供LivenessProbe，则也认为是Success；</span></span><br><span class="line">            <span class="attr">httpGet:</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">/health</span> <span class="comment">#如果没有心跳检测接口就为/</span></span><br><span class="line">              <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">              <span class="attr">scheme:</span> <span class="string">HTTP</span></span><br><span class="line">            <span class="attr">initialDelaySeconds:</span> <span class="number">60</span> <span class="comment">##启动后延时多久开始运行检测</span></span><br><span class="line">            <span class="attr">timeoutSeconds:</span> <span class="number">5</span></span><br><span class="line">            <span class="attr">successThreshold:</span> <span class="number">1</span></span><br><span class="line">            <span class="attr">failureThreshold:</span> <span class="number">5</span></span><br><span class="line">          <span class="attr">readinessProbe:</span></span><br><span class="line">            <span class="attr">httpGet:</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">/health</span> <span class="comment">#如果没有心跳检测接口就为/</span></span><br><span class="line">              <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">              <span class="attr">scheme:</span> <span class="string">HTTP</span></span><br><span class="line">            <span class="attr">initialDelaySeconds:</span> <span class="number">30</span> <span class="comment">##启动后延时多久开始运行检测</span></span><br><span class="line">            <span class="attr">timeoutSeconds:</span> <span class="number">5</span></span><br><span class="line">            <span class="attr">successThreshold:</span> <span class="number">1</span></span><br><span class="line">            <span class="attr">failureThreshold:</span> <span class="number">5</span></span><br><span class="line">          <span class="attr">resources:</span>              <span class="comment">##CPU内存限制</span></span><br><span class="line">            <span class="attr">requests:</span></span><br><span class="line">              <span class="attr">cpu:</span> <span class="number">2</span></span><br><span class="line">              <span class="attr">memory:</span> <span class="string">2048Mi</span></span><br><span class="line">            <span class="attr">limits:</span></span><br><span class="line">              <span class="attr">cpu:</span> <span class="number">2</span></span><br><span class="line">              <span class="attr">memory:</span> <span class="string">2048Mi</span></span><br><span class="line">          <span class="attr">env:</span>                    <span class="comment">##通过环境变量的方式，直接传递pod=自定义Linux OS环境变量</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">LOCAL_KEY</span>     <span class="comment">#本地Key</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">value</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">CONFIG_MAP_KEY</span>  <span class="comment">#局策略可使用configMap的配置Key，</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">configMapKeyRef:</span></span><br><span class="line">                  <span class="attr">name:</span> <span class="string">special-config</span>   <span class="comment">#configmap中找到name为special-config</span></span><br><span class="line">                  <span class="attr">key:</span> <span class="string">special.type</span>      <span class="comment">#找到name为special-config里data下的key</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">              <span class="attr">containerPort:</span> <span class="number">8080</span> <span class="comment">#对service暴露端口</span></span><br><span class="line">          <span class="attr">volumeMounts:</span>     <span class="comment">#挂载volumes中定义的磁盘</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">log-cache</span></span><br><span class="line">            <span class="attr">mount:</span> <span class="string">/tmp/log</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">sdb</span>       <span class="comment">#普通用法，该卷跟随容器销毁，挂载一个目录</span></span><br><span class="line">            <span class="attr">mountPath:</span> <span class="string">/data/media</span>    </span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-client-root</span>    <span class="comment">#直接挂载硬盘方法，如挂载下面的nfs目录到/mnt/nfs</span></span><br><span class="line">            <span class="attr">mountPath:</span> <span class="string">/mnt/nfs</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">example-volume-config</span>  <span class="comment">#高级用法第1种，将ConfigMap的log-script,backup-script分别挂载到/etc/config目录下的一个相对路径path/to/...下，如果存在同名文件，直接覆盖。</span></span><br><span class="line">            <span class="attr">mountPath:</span> <span class="string">/etc/config</span>       </span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">rbd-pvc</span>                <span class="comment">#高级用法第2中，挂载PVC(PresistentVolumeClaim)</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#使用volume将ConfigMap作为文件或目录直接挂载，其中每一个key-value键值对都会生成一个文件，key为文件名，value为内容，</span></span><br><span class="line">  <span class="attr">volumes:</span>  <span class="comment"># 定义磁盘给上面volumeMounts挂载</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">log-cache</span></span><br><span class="line">    <span class="attr">emptyDir:</span> &#123;&#125;</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">sdb</span>  <span class="comment">#挂载宿主机上面的目录</span></span><br><span class="line">    <span class="attr">hostPath:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/any/path/it/will/be/replaced</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">example-volume-config</span>  <span class="comment"># 供ConfigMap文件内容到指定路径使用</span></span><br><span class="line">    <span class="attr">configMap:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">example-volume-config</span>  <span class="comment">#ConfigMap中名称</span></span><br><span class="line">      <span class="attr">items:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">log-script</span>           <span class="comment">#ConfigMap中的Key</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">path/to/log-script</span>  <span class="comment">#指定目录下的一个相对路径path/to/log-script</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">backup-script</span>        <span class="comment">#ConfigMap中的Key</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">path/to/backup-script</span>  <span class="comment">#指定目录下的一个相对路径path/to/backup-script</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-client-root</span>         <span class="comment">#供挂载NFS存储类型</span></span><br><span class="line">    <span class="attr">nfs:</span></span><br><span class="line">      <span class="attr">server:</span> <span class="number">10.42</span><span class="number">.0</span><span class="number">.55</span>          <span class="comment">#NFS服务器地址</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/opt/public</span>           <span class="comment">#showmount -e 看一下路径</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">rbd-pvc</span>                 <span class="comment">#挂载PVC磁盘</span></span><br><span class="line">    <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">      <span class="attr">claimName:</span> <span class="string">rbd-pvc1</span>         <span class="comment">#挂载已经申请的pvc磁盘</span></span><br></pre></td></tr></table></figure><h2 id="Service-yaml文件详解"><a href="#Service-yaml文件详解" class="headerlink" title="Service yaml文件详解"></a>Service yaml文件详解</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">matadata:</span>                                <span class="comment">#元数据</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">string</span>                           <span class="comment">#service的名称</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">string</span>                      <span class="comment">#命名空间  </span></span><br><span class="line">  <span class="attr">labels:</span>                                <span class="comment">#自定义标签属性列表</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">string</span></span><br><span class="line">  <span class="attr">annotations:</span>                           <span class="comment">#自定义注解属性列表  </span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">spec:</span>                                    <span class="comment">#详细描述</span></span><br><span class="line">  <span class="attr">selector:</span> []                           <span class="comment">#label selector配置，将选择具有label标签的Pod作为管理 </span></span><br><span class="line">                                         <span class="comment">#范围</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">string</span>                           <span class="comment">#service的类型，指定service的访问方式，默认为 </span></span><br><span class="line">                                         <span class="comment">#clusterIp</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="string">string</span>                      <span class="comment">#虚拟服务地址      </span></span><br><span class="line">  <span class="attr">sessionAffinity:</span> <span class="string">string</span>                <span class="comment">#是否支持session</span></span><br><span class="line">  <span class="attr">ports:</span>                                 <span class="comment">#service需要暴露的端口列表</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">string</span>                         <span class="comment">#端口名称</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">string</span>                     <span class="comment">#端口协议，支持TCP和UDP，默认TCP</span></span><br><span class="line">    <span class="attr">port:</span> <span class="string">int</span>                            <span class="comment">#服务监听的端口号</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="string">int</span>                      <span class="comment">#需要转发到后端Pod的端口号</span></span><br><span class="line">    <span class="attr">nodePort:</span> <span class="string">int</span>                        <span class="comment">#当type = NodePort时，指定映射到物理机的端口号</span></span><br><span class="line">  <span class="attr">status:</span>                                <span class="comment">#当spce.type=LoadBalancer时，设置外部负载均衡器的地址</span></span><br><span class="line">    <span class="attr">loadBalancer:</span>                        <span class="comment">#外部负载均衡器    </span></span><br><span class="line">      <span class="attr">ingress:</span>                           <span class="comment">#外部负载均衡器 </span></span><br><span class="line">        <span class="attr">ip:</span> <span class="string">string</span>                       <span class="comment">#外部负载均衡器的Ip地址值</span></span><br><span class="line">        <span class="attr">hostname:</span> <span class="string">string</span>                 <span class="comment">#外部负载均衡器的主机名</span></span><br></pre></td></tr></table></figure><h2 id="pv-yaml"><a href="#pv-yaml" class="headerlink" title="pv.yaml"></a>pv.yaml</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="pvc-yaml"><a href="#pvc-yaml" class="headerlink" title="pvc.yaml"></a>pvc.yaml</h2><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">apiVersion</span><span class="punctuation">:</span> <span class="string">v1</span></span><br><span class="line"><span class="attribute">kind</span><span class="punctuation">:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attribute">metadata</span><span class="punctuation">:</span></span><br><span class="line">  <span class="attribute">name</span><span class="punctuation">:</span> <span class="string">nginx-pvc</span></span><br><span class="line">  <span class="attribute">namespace</span><span class="punctuation">:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attribute">spec</span><span class="punctuation">:</span></span><br><span class="line"><span class="attribute">spec</span><span class="punctuation">:</span></span><br><span class="line">  <span class="attribute">accessModes</span><span class="punctuation">:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ReadWriteMany</span></span><br><span class="line">  <span class="attribute">resources</span><span class="punctuation">:</span></span><br><span class="line">    <span class="attribute">requests</span><span class="punctuation">:</span></span><br><span class="line">      <span class="attribute">storage</span><span class="punctuation">:</span> <span class="string">20Gi</span></span><br><span class="line">  <span class="attribute">storageClassName</span><span class="punctuation">:</span> <span class="string">nginx-pv</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="namespace-yaml"><a href="#namespace-yaml" class="headerlink" title="namespace.yaml"></a>namespace.yaml</h2><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">kind:</span> Namespace  --创建命名空间</span><br><span class="line"><span class="symbol">apiVersion:</span> v1</span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line"><span class="symbol">  name:</span> nginx  --名称</span><br><span class="line"><span class="symbol">  labels:</span></span><br><span class="line"><span class="symbol">   name:</span> nginx</span><br></pre></td></tr></table></figure><h2 id="ingress-yaml"><a href="#ingress-yaml" class="headerlink" title="ingress.yaml"></a>ingress.yaml</h2><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">apiVersion</span><span class="punctuation">:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attribute">kind</span><span class="punctuation">:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attribute">metadata</span><span class="punctuation">:</span></span><br><span class="line">  <span class="attribute">name</span><span class="punctuation">:</span> <span class="string">ingress-yaohong1</span></span><br><span class="line">  <span class="attribute">namespace</span><span class="punctuation">:</span> <span class="string">kuboard</span></span><br><span class="line">  <span class="attribute">annotations</span><span class="punctuation">:</span></span><br><span class="line">       <span class="attribute">kubernetes.io/ingress.class</span><span class="punctuation">:</span> <span class="string">&quot;nginx&quot;</span></span><br><span class="line"><span class="attribute">spec</span><span class="punctuation">:</span></span><br><span class="line">  <span class="attribute">rules</span><span class="punctuation">:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">host: test.nginx1.com</span></span><br><span class="line">      <span class="attribute">http</span><span class="punctuation">:</span></span><br><span class="line">        <span class="attribute">paths</span><span class="punctuation">:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">path: /                </span></span><br><span class="line">          <span class="attribute">backend</span><span class="punctuation">: </span></span><br><span class="line">            <span class="attribute">serviceName</span><span class="punctuation">:</span> <span class="string">nginx-service</span></span><br><span class="line">            <span class="attribute">servicePort</span><span class="punctuation">:</span> <span class="string">80</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">host: test.kuboard.com</span></span><br><span class="line">      <span class="attribute">http</span><span class="punctuation">:</span></span><br><span class="line">        <span class="attribute">paths</span><span class="punctuation">:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">path: /               </span></span><br><span class="line">          <span class="attribute">backend</span><span class="punctuation">: </span></span><br><span class="line">            <span class="attribute">serviceName</span><span class="punctuation">:</span> <span class="string">kuboard</span></span><br><span class="line">            <span class="attribute">servicePort</span><span class="punctuation">:</span> <span class="string">80</span></span><br></pre></td></tr></table></figure><h1 id="Pod-和-Sevice联系"><a href="#Pod-和-Sevice联系" class="headerlink" title="Pod 和 Sevice联系"></a>Pod 和 Sevice联系</h1><ul><li>Kubernetes 中 Pod 是随时可以消亡的（节点故障、容器内应用程序错误等原因）。如果使用 Deployment 运行您的应用程序，Deployment 将会在 Pod 消亡后再创建一个新的 Pod 以维持所需要的副本数。每一个 Pod 有自己的 IP 地址，然而，对于 Deployment 而言，对应 Pod 集合是动态变化的。<br>这个现象导致了如下问题：<ul><li>如果某些 Pod（假设是 ‘backends’）为另外一些 Pod（假设是 ‘frontends’）提供接口，在 ‘backends’ 中的 Pod 集合不断变化（IP 地址也跟着变化）的情况下，</li><li>‘frontends’ 中的 Pod 如何才能知道应该将请求发送到哪个 IP 地址？</li></ul></li></ul><p>Service 存在的意义，就是为了解决这个问题。</p><h2 id="Kubernetes-Service"><a href="#Kubernetes-Service" class="headerlink" title="Kubernetes Service"></a>Kubernetes Service</h2><p>Kubernetes 中 Service 是一个 API 对象，通过 kubectl + YAML 或者 Kuboard，定义一个 Service，可以将符合 Service 指定条件的 Pod 作为可通过网络访问的服务提供给服务调用者。<br>Service 是 Kubernetes 中的一种服务发现机制：<br>    * Pod 有自己的 IP 地址<br>    * Service 被赋予一个唯一的 dns name<br>    * Service 通过 label selector 选定一组 Pod<br>    * Service 实现负载均衡，可将请求均衡分发到选定这一组 Pod 中</p><p>例如，假设有一个无状态的图像处理后端程序运行了 3 个 Pod 副本。这些副本是相互可替代的（前端程序调用其中任何一个都可以）。在后端程序的副本集中的 Pod 经常变化（销毁、重建、扩容、缩容等）的情况下，前端程序不应该关注这些变化。</p><p><img src="/2022/08/22/K8S%E7%9F%A5/pasted-18.png" alt="服务图"></p><h2 id="service网络–NodePort"><a href="#service网络–NodePort" class="headerlink" title="service网络–NodePort"></a>service网络–NodePort</h2><p>（1）通过设置nodePort映射到物理机，同时设置Service的类型为NodePort：</p><p><img src="/2022/08/22/K8S%E7%9F%A5/pasted-19.png" alt="NodePort"></p><p><img src="/2022/08/22/K8S%E7%9F%A5/pasted-21.png" alt="yaml配置"></p><h2 id="通过Loadbalance将服务暴露出来"><a href="#通过Loadbalance将服务暴露出来" class="headerlink" title="通过Loadbalance将服务暴露出来"></a>通过Loadbalance将服务暴露出来</h2><p>LoadBalancer 服务是暴露服务到 internet 的标准方式。在 GKE 上，这种方式会启动一个 Network Load Balancer[2]，它将给你一个单独的 IP 地址，转发所有流量到你的服务。</p><p><img src="/2022/08/22/K8S%E7%9F%A5/pasted-22.png" alt="Loadbalance"><br>这个方式的最大缺点是每一个用 LoadBalancer 暴露的服务都会有它自己的 IP 地址，每个用到的 LoadBalancer 都需要付费，这将是非常昂贵的。</p><h2 id="通过Ingress暴露服务"><a href="#通过Ingress暴露服务" class="headerlink" title="通过Ingress暴露服务"></a>通过Ingress暴露服务</h2><p>为什么使用Ingress，一个重要的原因是LoadBalancer服务都需要创建自己的负载均衡器，以及独有的公有Ip地址，而Ingress只需要一个公网Ip就能为许多服务提供访问。<br><img src="/2022/08/22/K8S%E7%9F%A5/pasted-23.png" alt="Ingress"><br>Ingress 事实上不是一种服务类型。相反，它处于多个服务的前端，扮演着“智能路由”或者集群入口的角色。你可以用 Ingress 来做许多不同的事情，各种不同类型的 Ingress 控制器也有不同的能力。</p><p><img src="/2022/08/22/K8S%E7%9F%A5/pasted-24.png" alt="Ingress2"></p><h3 id="了解Ingress的工作原理"><a href="#了解Ingress的工作原理" class="headerlink" title="了解Ingress的工作原理"></a>了解Ingress的工作原理</h3><ul><li><p>1）ingress是kubernetes的一个资源对象，用于编写定义规则。</p></li><li><p>2）反向代理负载均衡器，通常以Service的Port方式运行，接收并按照ingress定义的规则进行转发，通常为nginx，haproxy，traefik等，本次使用nginx。</p></li><li><p>3）ingress-controller，监听apiserver，获取服务新增，删除等变化，并结合ingress规则动态更新到反向代理负载均衡器上，并重载配置使其生效。</p></li></ul><p><img src="/2022/08/22/K8S%E7%9F%A5/pasted-25.png" alt="Ingress的工作原理"></p><ul><li>1.ingress controller通过和kubernetes api交互，动态的去感知集群中ingress规则变化，</li><li>2.然后读取它，按照自定义的规则，规则就是写明了哪个域名对应哪个service，生成一段nginx配置，</li><li>3.再写到nginx-ingress-control的pod里，这个Ingress controller的pod里运行着一个Nginx服务，控制器会把生成的nginx配置写入&#x2F;etc&#x2F;nginx.conf文件中，</li><li>4.然后reload一下使配置生效。以此达到域名分配置和动态更新的问题。</li></ul><h3 id="Ingress-可以解决什么问题"><a href="#Ingress-可以解决什么问题" class="headerlink" title="Ingress 可以解决什么问题"></a>Ingress 可以解决什么问题</h3><ul><li><p>1.动态配置服务<br>　　如果按照传统方式, 当新增加一个服务时, 我们可能需要在流量入口加一个反向代理指向我们新的k8s服务. 而如果用了Ingress, 只需要配置好这个服务, 当服务启动时, 会自动注册到Ingress的中, 不需要而外的操作.</p></li><li><p>2.减少不必要的端口暴露<br>　　配置过k8s的都清楚, 第一步是要关闭防火墙的, 主要原因是k8s的很多服务会以NodePort方式映射出去, 这样就相当于给宿主机打了很多孔, 既不安全也不优雅. 而Ingress可以避免这个问题, 除了Ingress自身服务可能需要映射出去, 其他服务都不要用NodePort方式</p></li></ul><p>通过相同的Ingress暴露多少服务</p><ul><li>1.将不同的服务映射到相同的主机不同的路径</li><li>2 将不同的服务映射到不同的主机上</li></ul><h3 id="安装Ingress"><a href="#安装Ingress" class="headerlink" title="安装Ingress"></a>安装Ingress</h3><ul><li>下载<a href="/download/ingress.zip">ingress脚本</a> ，解压<br>后上传至k8s master主机</li></ul><p><img src="/2022/08/22/K8S%E7%9F%A5/pasted-26.png" alt="包含文件"></p><ul><li>运行ingress-nginx <figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">apply</span> -f mandatory.yaml</span><br></pre></td></tr></table></figure></li><li>配置ingress-nginx-svc.yaml 修改externalIPS ip 为k8s master 和k8s node节点ip</li></ul><p><img src="/2022/08/22/K8S%E7%9F%A5/pasted-27.png" alt="ingress-nginx-svc.yaml"></p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">apply</span> -f ingress-nginx.svc.yaml</span><br></pre></td></tr></table></figure><ul><li><p>以下命令运行nginx 和kuboard镜像–目的测试ingress<br>创建kuboard 命名空间</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="keyword">apply</span> -f kuboard-<span class="keyword">namespace</span>.yaml</span><br></pre></td></tr></table></figure></li><li><p>创建nginx</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl  <span class="built_in">apply</span> -f nginx.yaml</span><br></pre></td></tr></table></figure></li><li><p>创建kuboard</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">apply</span> -f kuboard.yaml</span><br></pre></td></tr></table></figure></li><li><p>获取token  </p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n kuboard get secret <span class="constructor">$(<span class="params">kubectl</span> -<span class="params">n</span> <span class="params">kuboard</span> <span class="params">get</span> <span class="params">secret</span> | <span class="params">grep</span> <span class="params">kuboard</span>-<span class="params">user</span> | <span class="params">awk</span> &#x27;&#123;<span class="params">print</span> $1&#125;&#x27;)</span> -o go-template=&#x27;&#123;&#123;.data.token&#125;&#125;&#x27; <span class="pattern-match">| base64 -d</span></span><br><span class="line"><span class="pattern-match"></span></span><br></pre></td></tr></table></figure></li><li><p>host文件设置 </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">192.168</span>.<span class="number">31.59</span> apiserver<span class="selector-class">.demo</span> test<span class="selector-class">.nginx</span><span class="selector-class">.com</span>  test<span class="selector-class">.kuboard</span><span class="selector-class">.com</span> test<span class="selector-class">.nginx1</span><span class="selector-class">.com</span> test<span class="selector-class">.nginx2</span>.com</span><br></pre></td></tr></table></figure></li><li><p>配置<a href="http://test.nginx.com/">http://test.nginx.com/</a> 访问nginx<br>kubectl apply -f ingress.yml</p></li></ul><p><img src="/2022/08/22/K8S%E7%9F%A5/pasted-28.png" alt="test.nginx.com"></p><ul><li>配置 <a href="http://test.nginx1.com/">http://test.nginx1.com/</a> 访问nginx <a href="http://test.kuboard.com/">http://test.kuboard.com/</a> 访问 kuboard <figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">apply</span> -f ingress1.yml</span><br></pre></td></tr></table></figure><img src="/2022/08/22/K8S%E7%9F%A5/pasted-29.png" alt="test.nginx1.com"></li></ul><p><img src="/2022/08/22/K8S%E7%9F%A5/pasted-30.png" alt="test.kuboard.com"></p><ul><li><a href="http://test.nginx2.com/nginx">http://test.nginx2.com/nginx</a> <a href="http://test.nginx2.com/kuboard">http://test.nginx2.com/kuboard</a>  同一域名不同路径<figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">apply</span> -f ingress2.yml</span><br></pre></td></tr></table></figure></li></ul><p><img src="/2022/08/22/K8S%E7%9F%A5/pasted-31.png" alt="test.nginx2.com/nginx "></p><p>仅是模拟不同域名下不同路径 映射不同pod,正常访问kuboard 需要访问test.kuboard.com<br><img src="/2022/08/22/K8S%E7%9F%A5/pasted-33.png" alt="http://test.nginx2.com/kuboard"></p><ul><li>获取ingress<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="keyword">get</span> ingress <span class="comment">--all-namespaces</span></span><br></pre></td></tr></table></figure></li><li>删除<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="keyword">delete</span> -f nginx.yaml</span><br><span class="line"></span><br><span class="line">kubectl <span class="keyword">delete</span> -f kuboard.yaml</span><br><span class="line">kubectl <span class="keyword">delete</span> -f ingress.yml</span><br><span class="line">kubectl <span class="keyword">delete</span> -f ingress1.yml</span><br><span class="line">kubectl <span class="keyword">delete</span> -f ingress2.yml</span><br><span class="line">kubectl <span class="keyword">delete</span> -f kuboard-<span class="keyword">namespace</span>.yaml</span><br></pre></td></tr></table></figure></li></ul><h1 id="k8s-dns"><a href="#k8s-dns" class="headerlink" title="k8s-dns"></a>k8s-dns</h1><p>前面我们给大家讲解了 Service 的用法，我们可以通过 Service 生成的 ClusterIP(VIP)来访问 Pod 提供的服务，但是在使用的时候还有一个问题：我们怎么知道某个应用的 VIP 呢？比如我们有两个应用，一个是 api 应用，一个是 db 应用，两个应用都是通过 Deployment 进行管理的，并且都通过 Service 暴露出了端口提供服务。api 需要连接到 db 这个应用，我们只知道 db 应用的名称和 db 对应的 Service 的名称，但是并不知道它的 VIP 地址，我们前面的 Service 课程中是不是学习到我们通过 ClusterIP 就可以访问到后面的 Pod 服务，如果我们知道了 VIP 的地址是不是就行了？</p><p>那就是可以直接使用 Service 的名称，因为 Service 的名称不会变化，我们不需要去关心分配的 ClusterIP 的地址，因为这个地址并不是固定不变的，所以如果我们直接使用 Service 的名字，然后对应的 ClusterIP 地址的转换能够自动完成就很好了。我们知道名字和 IP 直接的转换是不是和我们平时访问的网站非常类似啊？他们之间的转换功能通过 DNS 就可以解决了，同样的，Kubernetes 也提供了 DNS 的方案来解决上面的服务发现的问题。<br>DNS 服务不是一个独立的系统服务，而是作为一种 addon 插件而存在，也就是说不是 Kubernetes 集群必须安装的，当然我们强烈推荐安装，可以将这个插件看成是一种运行在 Kubernetes 集群上的一直比较特殊的应用，现在比较推荐的两个插件：kube-dns 和 CoreDNS。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">get</span> pods -n kube-system -l <span class="attribute">k8s-app</span>=kube-dns -o wide</span><br></pre></td></tr></table></figure><p><img src="/2022/08/22/K8S%E7%9F%A5/pasted-36.png" alt="core dns"></p><h1 id="PV和PVC"><a href="#PV和PVC" class="headerlink" title="PV和PVC"></a>PV和PVC</h1><p>*　管理存储是管理计算的一个明显问题。该PersistentVolume子系统为用户和管理员提供了一个API，用于抽象如何根据消费方式提供存储的详细信息。为此，我们引入了两个新的API资源：PersistentVolume和PersistentVolumeClaim</p><p>*　　PersistentVolume（PV）是集群中由管理员配置的一段网络存储。 它是集群中的资源，就像节点是集群资源一样。 PV是容量插件，如Volumes，但其生命周期独立于使用PV的任何单个pod。 此API对象捕获存储实现的详细信息，包括NFS，iSCSI或特定于云提供程序的存储系统。</p><p>　　PersistentVolumeClaim（PVC）是由用户进行存储的请求。 它类似于pod。 Pod消耗节点资源，PVC消耗PV资源。Pod可以请求特定级别的资源（CPU和内存）。声明可以请求特定的大小和访问模式<br>访问模式：</p><ul><li>ReadWriteOnce – the volume can be mounted as read-write by a single node</li><li>ReadOnlyMany – the volume can be mounted read-only by many nodes</li><li>ReadWriteMany – the volume can be mounted as read-write by many nodes</li></ul><p>*　　虽然PersistentVolumeClaims允许用户使用抽象存储资源，但是PersistentVolumes对于不同的问题，用户通常需要具有不同属性（例如性能）。群集管理员需要能够提供各种PersistentVolumes不同的方式，而不仅仅是大小和访问模式，而不会让用户了解这些卷的实现方式。对于这些需求，有StorageClass 资源。<br>*　　StorageClass为管理员提供了一种描述他们提供的存储的“类”的方法。 不同的类可能映射到服务质量级别，或备份策略，或者由群集管理员确定的任意策略。 Kubernetes本身对于什么类别代表是不言而喻的。 这个概念有时在其他存储系统中称为“配置文件”。<br>*　　PVC和PV是一一对应的。</p><h2 id="生命周期-Provisioning-——-gt-Binding-——–-gt-Using——-gt-Releasing——-gt-Recycling"><a href="#生命周期-Provisioning-——-gt-Binding-——–-gt-Using——-gt-Releasing——-gt-Recycling" class="headerlink" title="(生命周期)Provisioning ——-&gt; Binding ——–&gt;Using——&gt;Releasing——&gt;Recycling"></a>(生命周期)Provisioning ——-&gt; Binding ——–&gt;Using——&gt;Releasing——&gt;Recycling</h2><ul><li>供应准备Provisioning—通过集群外的存储系统或者云平台来提供存储持久化支持。</li></ul><ul><li>静态提供Static：集群管理员创建多个PV。 它们携带可供集群用户使用的真实存储的详细信息。 它们存在于Kubernetes API中，可用于消费</li><li>动态提供Dynamic：当管理员创建的静态PV都不匹配用户的PersistentVolumeClaim时，集群可能会尝试为PVC动态配置卷。 此配置基于StorageClasses：PVC必须请求一个类，并且管理员必须已创建并配置该类才能进行动态配置。 要求该类的声明有效地为自己禁用动态配置。</li></ul><ul><li>绑定Bound—用户创建pvc并指定需要的资源和访问模式。在找到可用pv之前，pvc会保持未绑定状态。</li><li>使用Using—用户可在pod中像volume一样使用pvc。</li><li>释放Releasing—用户删除pvc来回收存储资源，pv将变成“released”状态。由于还保留着之前的数据，这些数据需要根据不同的策略来处理，否则这些存储资源无法被其他pvc使用。</li><li>回收Recycling—pv可以设置三种回收策略：保留（Retain），回收（Recycle）和删除（Delete）。</li></ul><ul><li>保留策略：允许人工处理保留的数据。</li><li>删除策略：将删除pv和外部关联的存储资源，需要插件支持。</li><li>回收策略：将执行清除操作，之后可以被新的pvc使用，需要插件支持。</li></ul><ul><li>注：目前只有NFS和HostPath类型卷支持回收策略，AWS EBS,GCE PD,Azure Disk和Cinder支持删除(Delete)策略。</li></ul><h2 id="PV和PVC–以NFS为例子"><a href="#PV和PVC–以NFS为例子" class="headerlink" title="PV和PVC–以NFS为例子"></a>PV和PVC–以NFS为例子</h2><p>NFS（Network File System）即网络文件系统，它允许网络中的计算机之间通过TCP&#x2F;IP网络共享资源。在NFS的应用中，本地NFS的客户端应用可以透明地读写位于远端NFS服务器上的文件，就像访问本地文件一样。</p><ul><li>安装nfs-utils master node<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y <span class="built_in">nfs</span>-utils  rpcbind</span><br><span class="line">systemctl start rpcbind <span class="built_in">nfs</span></span><br><span class="line">systemctl enable  rpcbind <span class="built_in">nfs</span></span><br></pre></td></tr></table></figure></li><li>k8s主机设置nfs 共享<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p <span class="regexp">/pv/</span>nginx</span><br><span class="line">cd <span class="regexp">/pv/</span>nginx</span><br><span class="line">vi index.html</span><br></pre></td></tr></table></figure></li><li>index.html内容<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Welcome to nginx!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">35em</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-family</span>: Tahoma, Verdana, Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome to nginx!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>If you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>For online documentation and support please refer to</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://nginx.org/&quot;</span>&gt;</span>nginx.org<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">Commercial support is available at</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://nginx.com/&quot;</span>&gt;</span>nginx.com<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>Thank you for using nginx.!!!!<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>设置共享盘 修改masterip<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>exports</span><br></pre></td></tr></table></figure></li><li>添加以下内容 后保存 换一下k8s masterip<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/pv/</span>nginx   <span class="number">192.168</span>.<span class="number">31.59</span>/<span class="number">24</span>(rw,sync)</span><br></pre></td></tr></table></figure></li><li>执行exportfs -arv<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">exportfs -arv</span></span><br></pre></td></tr></table></figure></li><li>k8s master node执行 换一下k8s masterip<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">showmount</span> -e <span class="number">192.168.31.59</span></span><br></pre></td></tr></table></figure></li><li>下载<a href="/download/pv.zip">pv.zip</a> ,解压后上传至k8s master</li></ul><p><img src="/2022/08/22/K8S%E7%9F%A5/pasted-32.png" alt="pv 文件"></p><ul><li>创建nginx命名空间<figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="keyword">apply</span> -f nginx-<span class="keyword">namespace</span>.yaml</span><br></pre></td></tr></table></figure></li><li>查看命名空间<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">get</span> ns</span><br></pre></td></tr></table></figure></li><li>创建pv 记得修改masterip<figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">apply</span> -f nginxpv.yaml</span><br></pre></td></tr></table></figure></li></ul><p><img src="/2022/08/22/K8S%E7%9F%A5/pasted-37.png" alt="nginx pv"></p><ul><li>查看pv<figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get <span class="built_in">pv</span> -<span class="built_in">n</span> nginx</span><br></pre></td></tr></table></figure></li><li>创建pvc<figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">apply</span> -f nginxpvc.yaml</span><br></pre></td></tr></table></figure></li><li>查看pvc<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">get</span> pvc -n nginx</span><br></pre></td></tr></table></figure></li><li>运行nginx <figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">apply</span> -f nginx.yaml</span><br></pre></td></tr></table></figure></li><li>查看pod<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">get</span> pod -n nginx</span><br></pre></td></tr></table></figure></li><li>查看svc<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">kubectl</span> <span class="meta">get</span> <span class="keyword">svc</span> -n nginx</span><br></pre></td></tr></table></figure></li><li>查看ingress 信息<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">get</span> ingress -n nginx</span><br></pre></td></tr></table></figure></li><li>设置主机名：192.168.31.59 test.nginxpv.com</li><li>浏览器访问：<a href="http://test.nginxpv.com/">http://test.nginxpv.com/</a></li></ul><p><img src="/2022/08/22/K8S%E7%9F%A5/pasted-38.png" alt="test.nginxpv.com"></p><ul><li>删除<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="keyword">delete</span> -f nginx.yaml</span><br></pre></td></tr></table></figure></li></ul><h1 id="helm"><a href="#helm" class="headerlink" title="helm"></a>helm</h1><p>我们在 k8s 中部署一个应用，通常面临以下几个问题：</p><ul><li>如何统一管理、配置和更新这些分散的 k8s 的应用资源文件</li><li>如何分发和复用一套应用模板</li><li>如何将应用的一系列资源当做一个软件包管理</li></ul><h2 id="Helm-管理-k8s集群"><a href="#Helm-管理-k8s集群" class="headerlink" title="Helm 管理 k8s集群"></a>Helm 管理 k8s集群</h2><p>Helm 可以理解为 Kubernetes 的包管理工具，可以方便地发现、共享和使用为Kubernetes构建的应用。<br>Helm 采用客户端&#x2F;服务器架构，有如下组件组成：</p><p><img src="/2022/08/22/K8S%E7%9F%A5/pasted-34.png" alt="helm"><br>Helm CLI 是 Helm 客户端，可以在本地执行</p><p>Tiller 是服务器端组件，在 Kubernetes 群集上运行，并管理 Kubernetes 应用程序的生命周期</p><p>Repository 是 Chart 仓库，Helm客户端通过HTTP协议来访问仓库中Chart的索引文件和压缩包。</p><p>chart Helm的打包格式叫做chart，所谓chart就是一系列文件, 它描述了一组相关的 k8s 集群资源</p><p>release 使用 helm install 命令在 Kubernetes 集群中部署的 Chart 称为 Release</p><h2 id="mac安装"><a href="#mac安装" class="headerlink" title="mac安装"></a>mac安装</h2><ul><li>k8s master主机下<figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="keyword">create</span> serviceaccount --<span class="keyword">namespace</span> kube-<span class="keyword">system</span> tiller</span><br></pre></td></tr></table></figure><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create clusterrolebinding <span class="keyword">default</span>-view --clusterrole=<span class="keyword">cluster</span>-admin --serviceaccount=<span class="keyword">default</span>:<span class="keyword">default</span></span><br></pre></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="keyword">create</span> clusterrolebinding tiller-<span class="keyword">cluster</span>-admin --clusterrole=<span class="keyword">cluster</span>-admin --serviceaccount=kube-<span class="keyword">system</span>:tiller</span><br></pre></td></tr></table></figure></li></ul><p><img src="/2022/08/22/K8S%E7%9F%A5/pasted-39.png" alt="kubectl tiller"></p><ul><li>copy master上 &#x2F;root&#x2F;.kube&#x2F;onfig文件至mac 用户目录下.kube&#x2F;</li><li>下载 mac 版本helm<br><a href="https://get.helm.sh/helm-v2.15.0-darwin-amd64.tar.gz">https://get.helm.sh/helm-v2.15.0-darwin-amd64.tar.gz</a><br>其它版本：<a href="https://github.com/helm/helm/releases/tag/v2.15.0">https://github.com/helm/helm/releases/tag/v2.15.0</a></li><li>mac电脑 下载解压后<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp helm <span class="regexp">/usr/</span>local/bin</span><br><span class="line">chmod +x <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>helm</span><br></pre></td></tr></table></figure></li><li>mac命令执行<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helm init <span class="attr">--service-account</span> tiller <span class="attr">--upgrade</span> <span class="attr">--tiller-image</span>=registry<span class="selector-class">.cn-hangzhou</span><span class="selector-class">.aliyuncs</span>.com/google_containers/tiller:v2.<span class="number">15.1</span> <span class="attr">--stable-repo-url</span> https:<span class="comment">//kubernetes.oss-cn-hangzhou.aliyuncs.com/charts</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="/2022/08/22/K8S%E7%9F%A5/pasted-40.png" alt="helm init"></p><ul><li>成功后 查看helm 版本<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helm <span class="built_in">version</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="/2022/08/22/K8S%E7%9F%A5/pasted-41.png" alt="helm version"></p><h2 id="helm-chart-的基本结构"><a href="#helm-chart-的基本结构" class="headerlink" title="helm chart 的基本结构"></a>helm chart 的基本结构</h2><ul><li>helm create nginxhelm<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">helm create nginxhelm</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="/2022/08/22/K8S%E7%9F%A5/pasted-43.png" alt="nginxhelm 目录"></p><p>charts 目录存放依赖的chart</p><p>Chart.yaml 包含Chart的基本信息，包括chart版本，名称等</p><p>templates 目录下存放应用一系列 k8s 资源的 yaml 模板<br>_helpers.tpl 此文件中定义一些可重用的模板片断，此文件中的定义在任何资源定义模板中可用</p><p>NOTES.txt 介绍chart 部署后的帮助信息，如何使用chart等</p><p>values.yaml 包含了必要的值定义（默认值）, 用于存储 </p><p>templates 目录中模板文件中用到变量的值</p><h2 id="helm-部署"><a href="#helm-部署" class="headerlink" title="helm 部署"></a>helm 部署</h2><ul><li>检查 语法<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">helm</span> lint nginxhelm/ </span><br></pre></td></tr></table></figure><img src="/2022/08/22/K8S%E7%9F%A5/pasted-44.png" alt="helm lint nginxhelm"></li><li>打包：<figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helm <span class="keyword">package</span> <span class="title">nginxhelm --debug</span></span><br></pre></td></tr></table></figure></li><li>部署<figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helm install nginxhelm <span class="comment">--name nginxhelm</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="/2022/08/22/K8S%E7%9F%A5/pasted-46.png" alt="helm install "></p><ul><li>在k8s节点进行访问 curl <a href="http://clusterip/">http://clusterip</a></li></ul><p><img src="/2022/08/22/K8S%E7%9F%A5/pasted-47.png" alt="访问"></p><h2 id="helm（升级-和回退）"><a href="#helm（升级-和回退）" class="headerlink" title="helm（升级 和回退）"></a>helm（升级 和回退）</h2><ul><li><p>修改：Chart.yaml version 0.2.1–&gt;0.2.2<br><img src="/2022/08/22/K8S%E7%9F%A5/pasted-48.png" alt="Chart.yaml"></p></li><li><p>打包：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helm <span class="keyword">package</span> <span class="title">nginxhelm --debug</span></span><br></pre></td></tr></table></figure></li><li><p>查看版本信息：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">helm search nginxhelm -l</span></span><br></pre></td></tr></table></figure></li><li><p>升级</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">helm upgrade nginxhelm nginxhelm</span> </span><br></pre></td></tr></table></figure><p>(helmproject项目有什么更改都可以通过upgrade进行更新k8s)</p></li><li><p>查看已经升级到最新版本</p> <figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">helm list</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="/2022/08/22/K8S%E7%9F%A5/pasted-49.png" alt=" helm list"></p><ul><li>回退： <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">helm</span> rollback nginxhelm <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="/2022/08/22/K8S%E7%9F%A5/pasted-50.png" alt="helm rollback 后查看helm list"></p><ul><li>删除<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helm <span class="built_in">delete</span> <span class="comment">--purge nginxhelm </span></span><br></pre></td></tr></table></figure></li></ul><h2 id="helm-常用命令"><a href="#helm-常用命令" class="headerlink" title="helm 常用命令"></a>helm 常用命令</h2><p><img src="/2022/08/22/K8S%E7%9F%A5/pasted-42.png" alt="图片/2022/08/22/K8S知/pasted-42.png"></p><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><ul><li>k8s 教程：<a href="https://www.kubernetes.org.cn/doc-11">https://www.kubernetes.org.cn/doc-11</a></li><li>k8s 安装：<a href="https://kuboard.cn/install/install-dashboard.html">https://kuboard.cn/install/install-dashboard.html</a></li><li>k8s pc&#x2F;PVC:<a href="http://www.mamicode.com/info-detail-1523110.html">http://www.mamicode.com/info-detail-1523110.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker知识</title>
      <link href="/2022/08/21/Docker%E7%9F%A5%E8%AF%86/"/>
      <url>/2022/08/21/Docker%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="部署方式演变"><a href="#部署方式演变" class="headerlink" title="部署方式演变"></a>部署方式演变</h1><p><img src="/2022/08/21/Docker%E7%9F%A5/pasted-0.png" alt="部署方式演变"></p><ul><li><p>传统部署时代<br>早期，企业直接将应用程序部署在物理机上。由于物理机上不能为应用程序定义资源使用边界，我们也就很难合理地分配计算资源。例如：如果多个应用程序运行在同一台物理机上，可能发生这样的情况：其中的一个应用程序消耗了大多数的计算资源，导致其他应用程序不能正常运行。应对此问题的一种解决办法是，将每一个应用程序运行在不同的物理机上。然而，这种做法无法大规模实施，因为资源利用率很低，且企业维护更多物理机的成本昂贵。<br><img src="/2022/08/21/Docker%E7%9F%A5/pasted-1.png" alt="传统部署时代"></p></li><li><p>虚拟化部署时代</p><ul><li>针对上述问题，虚拟化技术应运而生。用户可以在单台物理机的CPU上运行多个虚拟机（Virtual Machine）。</li><li>虚拟化技术使得应用程序被虚拟机相互分隔开，限制了应用程序之间的非法访问，进而提供了一定程度的安全性。</li><li>虚拟化技术提高了物理机的资源利用率，可以更容易地安装或更新应用程序，降低了硬件成本，因此可以更好地规模化实施。</li><li>每一个虚拟机可以认为是被虚拟化的物理机之上的一台完整的机器，其中运行了一台机器的所有组件，包括虚拟机自身的操作系统。<br><img src="/2022/08/21/Docker%E7%9F%A5/pasted-2.png" alt="虚拟化部署时代"></li></ul><p>  </p></li><li><p>容器化部署时代<br>容器与虚拟机类似，但是降低了隔离层级，共享了操作系统。因此，容器可以认为是轻量级的。<br>与虚拟机相似，每个容器拥有自己的文件系统、CPU、内存、进程空间等<br>运行应用程序所需要的资源都被容器包装，并和底层基础架构解耦<br>容器化的应用程序可以跨云服务商、跨Linux操作系统发行版进行部署</p></li></ul><p><img src="/2022/08/21/Docker%E7%9F%A5/pasted-3.png" alt="容器化部署时代"></p><h1 id="什么是docker"><a href="#什么是docker" class="headerlink" title="什么是docker"></a>什么是docker</h1><ul><li><p>Docker 是一个开源的应用容器引擎，可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在本地编译测试通过的容器可以批量地在生产环境中部署，包括VMs（虚拟机）、bare metal、OpenStack 集群和其他的基础应用平台。</p></li><li><p>简单的理解，Docker类似于集装箱，各式各样的货物，经过集装箱的标准化进行托管，而集装箱和集装箱之间没有影响。也就是说，Docker平台就是一个软件集装箱化平台，这就意味着我们自己可以构建应用程序，将其依赖关系一起打包到一个容器中，然后这容器就很容易运送到其他的机器上进行运行，而且非常易于装载、复制、移除，非常适合软件弹性架构。</p></li></ul><h2 id="docker跟虚拟机区别"><a href="#docker跟虚拟机区别" class="headerlink" title="docker跟虚拟机区别"></a>docker跟虚拟机区别</h2><p>Docker可以让一个应用在任何操作系统中非常方便的运行。而以前我们接触的虚拟机，也能在一个操作系统中，运行另外一个操作系统，保护系统中的任何应用。</p><p>两者有什么差异呢？</p><p>虚拟机（virtual machine）是在操作系统中模拟硬件设备，然后运行另一个操作系统，比如在 Windows 系统里面运行 Ubuntu 系统，这样就可以运行任意的Ubuntu应用了。</p><p>Docker仅仅是封装函数库，并没有模拟完整的操作系统，如图：</p><p><img src="/2022/08/21/Docker%E7%9F%A5/pasted-9.png" alt="docker跟虚拟机区别1"><br>由于容器所需的资源要少得多（例如，它们不需要一个完整的 OS），所以它们易于部署且可快速启动。这使你能够具有更高的密度，也就是说，这允许你在同一硬件单元上运行更多服务，从而降低了成本</p><p>对比<br><img src="/2022/08/21/Docker%E7%9F%A5/pasted-4.png" alt="docker跟虚拟机区别2"><br>  <br><img src="/2022/08/21/Docker%E7%9F%A5/pasted-8.png" alt="docker跟虚拟机区别3">  </p><h2 id="docker-好处（节省项目环境部署时间）"><a href="#docker-好处（节省项目环境部署时间）" class="headerlink" title="docker 好处（节省项目环境部署时间）"></a>docker 好处（节省项目环境部署时间）</h2><ul><li><p>场景1：单项目打包</p><ul><li><p>每次部署项目到测试、生产等环境，都要部署一大堆依赖的软件、工具，而且部署期间出现问题几率很大，不经意就花费了很长时间。</p></li><li><p>Docker主要理念就是环境打包部署，可在任意Docker Engine运行。前期我们只需要将每个项目环境打包到镜像，push到镜像仓库，当有需要部署这个项目时，直接pull镜像启动容器，这个项目就可以访问了！一次构建多次部署，一劳永逸。</p></li></ul></li><li><p>场景二：环境一致性</p><ul><li><p>开发工程师在Windows系统上开发项目，测试、生产环境操作系统都是Linux系统，这就产生了环境不一致的情况：项目在开发电脑本地运行没问题，到了测试或生产环境就运行不起来，解决这问题最好方式就是这三处环境保持一致。软件版本、操作系统、物理机、云主机……试想下，能做到吗？</p></li><li><p>Docker将项目环境打包成镜像，可以在任何Docker Engine上浪。此时Docker就是我们这些项目的基石，Docker可移植性，保持运行状态一致性，可想而知，是否更容易解决问题呢？</p></li></ul></li><li><p>场景三：持续集成</p><p>  *一个项目版本快速迭代的测试场景，需要一个合理的CI（持续集成）&#x2F;CD（持续部署）环境支撑。CI&#x2F;CD是一个周期性自动化项目测试流程，包括构建、部署、测试、发布等工作，很少需要人工干预。</p></li></ul><p>项目测试流程大致如下图：</p><p><img src="/2022/08/21/Docker%E7%9F%A5/pasted-11.png" alt="图片/2022/08/21/Docker知/pasted-11.png"></p><p>Docker结合Jenkins构建持续集成环境大致如下图：</p><p><img src="/2022/08/21/Docker%E7%9F%A5/pasted-12.png" alt="图片/2022/08/21/Docker知/pasted-12.png"><br>Docker在上面这个图的作用是项目镜像构建和快速部署，打通测试环境与生产环境，高度保持多个环境之间一致性。</p><ul><li>场景四：微服务<ul><li><p>微服务是近几年来IT圈内谈论比较多的一个名词，意义也很简单：尽可能细粒度拆分业务程序架构，由多个独立服务组成业务系统。</p></li><li><p>Docker的容器设计原则：一个容器一个服务，容器之间相互隔离，不妨试想一下，如果容器作为这些独立服务的部署单元，是不是有点恰到好处呢？</p></li></ul></li><li>场景五：弹性伸缩<ul><li><p>说到弹性伸缩，通常是集群模式下存在。像AWS AutoScaling，可以自定义资源阈值，SLB自动添加EC2云主机，应对业务访问量突发情况。</p></li><li><p>当适用Docker技术以后，这种弹性伸缩的单元就是云主机之上的容器了。</p></li><li><p>容器集群化管理已经有成熟的解决方案，比如：官方的Swarm，谷歌的K8S</p></li><li><p>由于Docker容器快速启动特性，可以很快速的启动几十个、上百个容器来提供更多并发和资源利用率（如果宿主机资源不够，还需要加主机到集群中）。</p></li></ul></li></ul><h2 id="docker-好处总结"><a href="#docker-好处总结" class="headerlink" title="docker 好处总结"></a>docker 好处总结</h2><p>根据上述应用场景总结下Docker特点：开箱即用，快速部署，可移植性强，环境隔离等。<br>简化部署流程，提高生产力！</p><h1 id="mac安装docker"><a href="#mac安装docker" class="headerlink" title="mac安装docker"></a>mac安装docker</h1><p><a href="https://petertanblog.github.io/2022/08/21/Mac%E6%8A%80%E5%B7%A7/#%E5%AE%89%E8%A3%85Docker">mac安装docker</a></p><h1 id="docker安装nginx"><a href="#docker安装nginx" class="headerlink" title="docker安装nginx"></a>docker安装nginx</h1><ul><li><p>run nginx</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> run -d --name nginx  -p <span class="number">8081</span>:<span class="number">80</span> ngin</span><br></pre></td></tr></table></figure></li><li><p>访问Nginx<br><a href="http://localhost:8081/">http://localhost:8081</a><br><img src="/2022/08/21/Docker%E7%9F%A5/pasted-13.png" alt="访问Nginx"></p></li><li><p>查看log</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker logs -f nginx</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/21/Docker%E7%9F%A5/pasted-14.png" alt="查看log"></p></li><li><p>进入容器</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -<span class="keyword">it</span> nginx bash</span><br></pre></td></tr></table></figure><p><img src="/2022/08/21/Docker%E7%9F%A5/pasted-15.png" alt="进入容器"></p></li><li><p>停止容器</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop nginx</span><br></pre></td></tr></table></figure></li><li><p>查看容器情况</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -<span class="selector-tag">a</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/21/Docker%E7%9F%A5/pasted-16.png" alt="查看容器情况"></p><ul><li>清理停止容器<figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">container</span> prune</span><br></pre></td></tr></table></figure></li></ul><p><img src="/2022/08/21/Docker%E7%9F%A5/pasted-17.png" alt="清理停止容器"></p><ul><li>新建目录 在某个目录新建html<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir html</span><br></pre></td></tr></table></figure></li><li>进入目录<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> html</span><br></pre></td></tr></table></figure></li><li>创建页面<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;welcome to nginx&#x27;</span> &gt; <span class="built_in">index</span>.html</span><br></pre></td></tr></table></figure></li><li>运行命令<br>把命令行xxx换成html目录下<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name some-nginx -v <span class="regexp">/xxx/</span>html:<span class="regexp">/usr/</span>share<span class="regexp">/nginx/</span>html -p <span class="number">8081</span>:<span class="number">80</span> -d nginx</span><br></pre></td></tr></table></figure></li><li>重新访问<a href="http://localhost:8081/">http://localhost:8081</a><br><img src="/2022/08/21/Docker%E7%9F%A5/pasted-18.png" alt="重新访问"></li></ul><h2 id="运行-nginx的总结"><a href="#运行-nginx的总结" class="headerlink" title="运行 nginx的总结"></a>运行 nginx的总结</h2><p>docker核心：镜像，容器，仓库</p><p>docker 常用命令：</p><ul><li>run— 运行一个镜像</li><li>images –查看本地镜像库</li><li>ps -a –查看本地所有容器状态</li><li>container prune –清理不正常容器</li><li>stop –停止容器</li><li>logs -f 容器id或容器名称 –查看日志</li><li>exec -it 容器id或容器名称  sh –进入容器</li><li>docker info–查看docker 信息</li></ul><h1 id="Docker-daemon"><a href="#Docker-daemon" class="headerlink" title="Docker daemon"></a>Docker daemon</h1><ul><li>docker采用C&#x2F;S架构，Dcoker daemon作为服务端接受来自客户端请求，并处理这些请求，比如创建容器、管理镜像。</li><li>为了兼容OCI标准，Docker1.1之后也做了架构调整，Docker容器运行已经不是简单的通过Docker daemon来启动，而是集成了containerd、runc等多个组件。</li></ul><p><img src="/2022/08/21/Docker%E7%9F%A5/pasted-19.png" alt="Docker daemon"></p><ul><li>Containerd：是一个简单的守护进程，管理shim，向Docker Engine提供接口。使用UnixSocket通信，协议是grpc。</li><li>Shim：管理一个容器</li><li>runC：运行一个容器。是基于OCI标准的一个容器技术实现，是一个可以直接创建和运行容器的工具。runc直接与容器所依赖的cgroups&#x2F;kernel等进行交互，负责容器所需环境。</li></ul><h2 id="docker-镜像（image）"><a href="#docker-镜像（image）" class="headerlink" title="docker -镜像（image）"></a>docker -镜像（image）</h2><ul><li>Docker的流行，很大因素是取决于有数十万计免费的应用镜像，使得用户或者开发者很容器找到可用的镜像。</li><li>镜像不是一个单一的文件，而是有多层构成。可以理解为镜像是创建容器的模板，一个镜像可以创建N个容器。镜像通常封装了一个应用的基础环境。</li><li>Docker 镜像（Image），就相当于是一个 root 文件系统（不包含linux内核而有精简linux操作系统）</li></ul><h2 id="docker–容器-container"><a href="#docker–容器-container" class="headerlink" title="docker–容器(container)"></a>docker–容器(container)</h2><ul><li><p>Container中文意思是集装箱，很多人叫容器，其实延续了原理的Linux container，不管叫哪个，含义是一样的。我觉得叫容器比较合适。容器本质上是Linux系统上的一个进程，这个父进程可能会有多个子进程组成，这个一组进程受资源限制，与其他组进程之间隔离。这种运行时的状态成为容器。</p></li><li><p>镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p></li></ul><h2 id="docker-镜像仓库-images-Repository"><a href="#docker-镜像仓库-images-Repository" class="headerlink" title="docker 镜像仓库(images Repository)"></a>docker 镜像仓库(images Repository)</h2><ul><li>容器是通过镜像创建的，大量的镜像需要找一个地方存放，这就需要Registry（注册中心）。</li><li>企业通常自建私有仓库，也可以使用公共仓库，例如：<ul><li>Docker Hub 地址：<a href="https://hub.docker.com/">https://hub.docker.com</a></li><li>Docker官方提供的公共托管Registry，上面有很多现成的镜像，Docker CLI默认就是从这个仓库下载的。</li><li>VMware Harbor 地址：<a href="https://github.com/goharbor/harbor">https://github.com/goharbor/harbor</a> VMware Harbor（简称Harbor）项目是由VMware中国研发团队开发的开源容器镜像仓库系统</li></ul></li></ul><h1 id="build-java环境-dockerfile"><a href="#build-java环境-dockerfile" class="headerlink" title="build java环境(dockerfile)"></a>build java环境(dockerfile)</h1><p>我们要运行一个spring boot web项目，我们就需要安装java，配置环境变量等等<br>现在我使用DockerFile  创建有java环境镜像</p><ul><li>设置<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">阿里云镜像加速</a><br><img src="/2022/08/21/Docker%E7%9F%A5/pasted-35.png" alt="阿里云镜像加速"></li><li>centos Dockerfile内容<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">FROM centos </span><br><span class="line">LABEL Author=<span class="string">&quot;ywtana&lt;xx@qq.com&gt;&quot;</span> </span><br><span class="line">RUN sed -i -e <span class="string">&quot;s|mirrorlist=|#mirrorlist=|g&quot;</span> /etc/yum.repos.d/CentOS-* &amp;&amp; \</span><br><span class="line">    sed -i -e <span class="string">&quot;s|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g&quot;</span> /etc/yum.repos.d/CentOS-* &amp;&amp; \ </span><br><span class="line">    yum -y update &amp;&amp; \ </span><br><span class="line">    yum install -y java-11-openjdk tzdata &amp;&amp; \</span><br><span class="line">    yum clean packages &amp;&amp; \</span><br><span class="line">    <span class="built_in">cp</span> /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; \</span><br><span class="line">    <span class="built_in">echo</span> Asia/Shanghai &gt; /etc/timezone &amp;&amp; \</span><br><span class="line">    <span class="built_in">rm</span> -rf /tmp/* /var/cache/*</span><br><span class="line">RUN groupadd -r <span class="built_in">test</span> &amp;&amp; \</span><br><span class="line">    useradd -g <span class="built_in">test</span>  -r <span class="built_in">test</span> &amp;&amp; \</span><br><span class="line">    <span class="built_in">mkdir</span> /test  &amp;&amp; \</span><br><span class="line">    <span class="built_in">chown</span> -R <span class="built_in">test</span>:<span class="built_in">test</span>  /test</span><br><span class="line">USER <span class="built_in">test</span></span><br><span class="line">WORKDIR /test</span><br><span class="line">RUN <span class="built_in">ls</span> -al /</span><br><span class="line"></span><br></pre></td></tr></table></figure>build命令<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t openjdk11_centos .</span><br></pre></td></tr></table></figure>build成功后<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker images</span></span><br></pre></td></tr></table></figure>运行 test用户登录<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="language-bash"> -u <span class="built_in">test</span>:<span class="built_in">test</span> -itd --name openjdk openjdk11_centos</span></span><br></pre></td></tr></table></figure>进入容器：<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -<span class="keyword">it</span> openjdk sh</span><br></pre></td></tr></table></figure>进入容器后输入<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java <span class="built_in">version</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="/2022/08/21/Docker%E7%9F%A5/pasted-37.png" alt="java version"></p><p><img src="/2022/08/21/Docker%E7%9F%A5/pasted-38.png" alt="test目录"></p><h2 id="Dockfile描述"><a href="#Dockfile描述" class="headerlink" title="Dockfile描述"></a>Dockfile描述</h2><p><img src="/2022/08/21/Docker%E7%9F%A5/pasted-20.png" alt="Dockfile描述"></p><h2 id="DockerFile-指令"><a href="#DockerFile-指令" class="headerlink" title="DockerFile 指令"></a>DockerFile 指令</h2><p><img src="/2022/08/21/Docker%E7%9F%A5/pasted-21.png" alt="DockerFile 指令1"><br><img src="/2022/08/21/Docker%E7%9F%A5/pasted-22.png" alt="DockerFile 指令2"></p><h1 id="docker-命令"><a href="#docker-命令" class="headerlink" title="docker 命令"></a>docker 命令</h1><h2 id="上传docker镜像至阿里云"><a href="#上传docker镜像至阿里云" class="headerlink" title="上传docker镜像至阿里云"></a>上传docker镜像至阿里云</h2><ul><li>点击<a href="https://cr.console.aliyun.com/cn-hangzhou/instance/namespaces">链接</a>进行阿里云镜像命名空间<br><img src="/2022/08/21/Docker%E7%9F%A5/pasted-32.png" alt="创建命名空间"></li><li>设置<a href="https://cr.console.aliyun.com/cn-hangzhou/instance/credentials">访问密码</a></li></ul><p><img src="/2022/08/21/Docker%E7%9F%A5/pasted-33.png" alt="访问密码"></p><ul><li>打开终端登录阿里云Docker Registry<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker login <span class="attr">--username</span>=<span class="number">3586</span>*****@<span class="number">163</span><span class="selector-class">.com</span> registry<span class="selector-class">.cn-hangzhou</span><span class="selector-class">.aliyuncs</span>.com</span><br></pre></td></tr></table></figure></li><li>docker tag<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">tag</span> <span class="title">nginx</span>  registry.cn-hangzhou.aliyuncs.com/test_peter/nginx:latest</span><br></pre></td></tr></table></figure></li><li>docker push<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">push</span> registry.cn-hangzhou.aliyuncs.com<span class="regexp">/test_peter/</span>nginx:latest</span><br></pre></td></tr></table></figure></li><li>docker pull<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com<span class="regexp">/test_peter/</span>nginx:latest</span><br></pre></td></tr></table></figure><img src="/2022/08/21/Docker%E7%9F%A5/pasted-23.png" alt="docker 命令"></li></ul><h2 id="docker命令说明"><a href="#docker命令说明" class="headerlink" title="docker命令说明"></a>docker命令说明</h2><p><img src="/2022/08/21/Docker%E7%9F%A5/pasted-24.png" alt="docker 命令1"></p><p><img src="/2022/08/21/Docker%E7%9F%A5/pasted-25.png" alt="docker 命令2"></p><h2 id="docker-run-参数说明"><a href="#docker-run-参数说明" class="headerlink" title="docker run 参数说明"></a>docker run 参数说明</h2><p>语法：docker run [OPTIONS] IMAGE [COMMAND] [ARG…]</p><ul><li>-d: 后台运行容器，并返回容器ID；</li><li>-i: 以交互模式运行容器，通常与 -t 同时使用；</li><li>-p: 指定端口映射，格式为：主机(宿主)端口:容器端口</li><li>-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</li><li>–name&#x3D;”nginx-lb”: 为容器指定一个名称；</li><li>–dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致；</li><li>-h “mars”: 指定容器的hostname；</li><li>-e username&#x3D;”ritchie”: 设置环境变量；</li><li>–env-file&#x3D;[]: 从指定文件读入环境变量；</li><li>–cpuset&#x3D;”0-2” or –cpuset&#x3D;”0,1,2”: 绑定容器到指定CPU运行；</li><li>-m :设置容器使用内存最大值；</li><li>–net&#x3D;”bridge”: 指定容器的网络连接类型，支持 bridge&#x2F;host&#x2F;none&#x2F;container: 四种类型；</li><li>–volume , -v: 绑定一个卷</li></ul><h1 id="docker-镜像与容器联系和存储驱动"><a href="#docker-镜像与容器联系和存储驱动" class="headerlink" title="docker 镜像与容器联系和存储驱动"></a>docker 镜像与容器联系和存储驱动</h1><ul><li>Docker镜像是由多个只读层添加而成，启动容器时，Docker加载值读镜像层并在镜像栈顶部添加一个读写层。</li><li>如果运行中的容器修改了现有的一个已经存在的文件，那么该文件将会在读写层下面的只读层复制到读写层，该文件的只读版本仍然存在，只是已经被读写曾中该文件的副本所隐层，这就是我们所说的写时复制，Elasticsearch也是用了写时复制。和这个略有不同。</li><li>默认情况下，容器不使用任何 volume，此时，容器的数据被保存在容器之内，它只在容器的生命周期内存在，关闭并重启容器，其数据不会受到影响，但是删除Docker容器，数据将会全部丢失。当然，也可以使用 docker commit 命令将它持久化为一个新的镜像</li><li>Docker的数据持久化即使数据不随着container的结束而结束，数据存在于host机器上——要么存在于host的某个指定目录中（使用bind mount），要么使用docker自己管理的volume（&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes下）</li><li>docker run 指定 -v参数</li><li>bind mount例如：<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name some-nginx -v <span class="regexp">/root/</span>html:<span class="regexp">/usr/</span>share<span class="regexp">/nginx/</span>html -p <span class="number">8081</span>:<span class="number">80</span> -d nginx</span><br></pre></td></tr></table></figure></li><li>使用docker volume create my-volume-2 后<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name some-nginx -v my-volume<span class="number">-2</span><span class="symbol">:/usr/share/nginx/html</span> -p <span class="number">8081</span><span class="symbol">:</span><span class="number">80</span> -d nginx</span><br></pre></td></tr></table></figure></li></ul><h1 id="docker网络"><a href="#docker网络" class="headerlink" title="docker网络"></a>docker网络</h1><ul><li><p>Docker自身的4种网络工作方式，和一些自定义网络模式<br>安装Docker时，它会自动创建三个网络，bridge（创建容器默认连接到此网络）、 none 、host</p><ul><li>host：容器将不会虚拟出自己的网卡，配置自己的IP等，而是使用宿主机的IP和端口。</li><li>Container：创建的容器不会创建自己的网卡，配置自己的IP，而是和一个指定的容器共享IP、端口范围。<br>None：该模式关闭了容器的网络功能。</li><li>Bridge：此模式会为每一个容器分配、设置IP等，并将容器连接到一个docker0虚拟网桥，通过docker0网桥以及Iptables nat表配置与宿主机通信。</li></ul></li><li><p>使用docker network ls 命令列出这些网络</p></li></ul><p><img src="/2022/08/21/Docker%E7%9F%A5/pasted-26.png" alt="docker network ls"></p><ul><li>run创建Docker容器时<ul><li>host模式：使用 –net&#x3D;host 指定。</li><li>none模式：使用 –net&#x3D;none 指定。</li><li>bridge模式：使用 –net&#x3D;bridge 指定，默认设置。</li><li>container模式：使用 –net&#x3D;container:NAME_or_ID 指定。</li></ul></li></ul><h1 id="docker-原理"><a href="#docker-原理" class="headerlink" title="docker 原理"></a>docker 原理</h1><p><img src="/2022/08/21/Docker%E7%9F%A5/pasted-27.png" alt="docker 原理"></p><ul><li><p>命名空间（namespaces）是 Linux 为我们提供的用于分离进程树、网络接口、挂载点以及进程间通信等资源的方法。</p></li><li><p>CGroups:让系统中所运行任务(进程)的用户定义组分配资源—比如CPU时间、系统内存、网络带宽</p></li><li><p>UnionFS:把文件系统上多个目录(分支)内容联合挂载到同一个目录下</p></li></ul><h2 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h2><p>命名空间（namespaces）是 Linux 为我们提供的用于分离进程树、网络接口、挂载点以及进程间通信等资源的方法。在日常使用 Linux 或者 macOS 时，我们并没有运行多个完全分离的服务器的需要，但是如果我们在服务器上启动了多个服务，这些服务其实会相互影响的，每一个服务都能看到其他服务的进程，也可以访问宿主机器上的任意文件，这是很多时候我们都不愿意看到的，我们更希望运行在同一台机器上的不同服务能做到完全隔离，就像运行在多台不同的机器上一样。</p><p><img src="/2022/08/21/Docker%E7%9F%A5/pasted-28.png" alt="namespace"></p><h2 id="CGroups"><a href="#CGroups" class="headerlink" title="CGroups"></a>CGroups</h2><p>我们通过 Linux 的命名空间为新创建的进程隔离了文件系统、网络并与宿主机器之间的进程相互隔离，但是命名空间并不能够为我们提供物理资源上的隔离，比如 CPU 或者内存，如果在同一台机器上运行了多个对彼此以及宿主机器一无所知的『容器』，这些容器却共同占用了宿主机器的物理资源。</p><p><img src="/2022/08/21/Docker%E7%9F%A5/pasted-29.png" alt="CGroups"></p><h2 id="UnionFS"><a href="#UnionFS" class="headerlink" title="UnionFS"></a>UnionFS</h2><p>Linux 的命名空间和控制组分别解决了不同资源隔离的问题，前者解决了进程、网络以及文件系统的隔离，后者实现了 CPU、内存等资源的隔离，但是在 Docker 中还有另一个非常重要的问题需要解决 - 也就是镜像。<br><img src="/2022/08/21/Docker%E7%9F%A5/pasted-31.png" alt="UnionFS"></p><h1 id="docker-常用镜像"><a href="#docker-常用镜像" class="headerlink" title="docker 常用镜像"></a>docker 常用镜像</h1><h2 id="docker-mysql"><a href="#docker-mysql" class="headerlink" title="docker mysql"></a>docker mysql</h2><ul><li>运行mysql 并映射本地数据文件夹 ，映射容器服务的 3306 端口到宿主机的 3306 端口。外部可以直接通过宿主机ip:3306 访问到  的服务；–restart&#x3D;always参数能够使我们在重启docker时,自动启动相关容器<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql --restart=always -p <span class="number">3306</span>:<span class="number">3306</span> -v <span class="regexp">/Users/</span>tanyanwen<span class="regexp">/Downloads/</span>html<span class="regexp">/mysql:/</span>var<span class="regexp">/lib/my</span>sql -e MYSQL_ROOT_PASSWORD=<span class="number">123456</span> -d mysql:<span class="number">5.7</span></span><br></pre></td></tr></table></figure></li><li>命令进入mysql容器 <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mysql <span class="regexp">/bin/</span>bash</span><br></pre></td></tr></table></figure></li><li>输入mysql命令 登录mysql<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -<span class="selector-tag">p</span></span><br></pre></td></tr></table></figure><img src="/2022/08/21/Docker%E7%9F%A5/pasted-36.png" alt="mysql命令"></li></ul><h2 id="docker-redis"><a href="#docker-redis" class="headerlink" title="docker redis"></a>docker redis</h2><ul><li>运行redis 镜像 并映射容器服务的 6379 端口到宿主机的 6379 端口。外部可以直接通过宿主机ip:6379 访问到 Redis 的服务；–restart&#x3D;always参数能够使我们在重启docker时,自动启动相关容器<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">run</span> -itd <span class="attribute">--restart</span>=always --name redis -p 6379:6379 redis</span><br></pre></td></tr></table></figure></li></ul><h2 id="ubuntu-build-openjdk11环境"><a href="#ubuntu-build-openjdk11环境" class="headerlink" title="ubuntu build openjdk11环境"></a>ubuntu build openjdk11环境</h2><ul><li>Dockfile<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu </span><br><span class="line">LABEL Author=<span class="string">&quot;peter&lt;xx@qq.com&gt;&quot;</span> </span><br><span class="line">RUN apt update -y &amp;&amp; \  </span><br><span class="line"> apt upgrade -y &amp;&amp; \</span><br><span class="line"> apt install  -y openjdk-11-jre-headless tzdata &amp;&amp; \</span><br><span class="line"> <span class="built_in">cp</span> /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; \</span><br><span class="line"> <span class="built_in">echo</span> Asia/Shanghai &gt; /etc/timezone &amp;&amp; \</span><br><span class="line"> <span class="built_in">rm</span> -rf /tmp/* /var/cache/*</span><br><span class="line"> RUN groupadd -r  <span class="built_in">test</span> &amp;&amp; \</span><br><span class="line">    useradd -g <span class="built_in">test</span> -r <span class="built_in">test</span> &amp;&amp; \</span><br><span class="line">    <span class="built_in">mkdir</span> /test  &amp;&amp; \</span><br><span class="line">    <span class="built_in">chown</span> -R <span class="built_in">test</span>:<span class="built_in">test</span>  /test</span><br><span class="line">USER <span class="built_in">test</span></span><br><span class="line">WORKDIR /test</span><br><span class="line">RUN <span class="built_in">ls</span> -al /</span><br></pre></td></tr></table></figure></li><li>执行build命令<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t openjdk11_ubuntu .</span><br></pre></td></tr></table></figure></li><li>运行<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">run</span> -u test:test -<span class="keyword">it</span> <span class="comment">--name openjdk openjdk11_ubuntu</span></span><br></pre></td></tr></table></figure></li><li>查看java<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -<span class="built_in">version</span></span><br></pre></td></tr></table></figure><img src="/2022/08/21/Docker%E7%9F%A5/pasted-41.png" alt="java -version"></li></ul><h2 id="alpine-build-openjdk11环境"><a href="#alpine-build-openjdk11环境" class="headerlink" title="alpine build openjdk11环境"></a>alpine build openjdk11环境</h2><ul><li>Dockfile<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine </span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> Author=<span class="string">&quot;peter&lt;xx@qq.com&gt;&quot;</span> </span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sed -i <span class="string">&#x27;s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apk/repositories &amp;&amp; \</span></span><br><span class="line"><span class="language-bash"> apk update &amp;&amp; \  </span></span><br><span class="line"> apk upgrade &amp;&amp; \</span><br><span class="line"> apk <span class="keyword">add</span><span class="language-bash"> openjdk11 tzdata &amp;&amp; \</span></span><br><span class="line"><span class="language-bash"> <span class="built_in">cp</span> /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; \</span></span><br><span class="line"><span class="language-bash"> <span class="built_in">echo</span> Asia/Shanghai &gt; /etc/timezone &amp;&amp; \</span></span><br><span class="line"><span class="language-bash"> <span class="built_in">rm</span> -rf /tmp/* /var/cache/apk/*</span></span><br><span class="line"> <span class="keyword">RUN</span><span class="language-bash"> addgroup <span class="built_in">test</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    adduser -G <span class="built_in">test</span>  <span class="built_in">test</span> -D &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">mkdir</span> /test  &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">chown</span> -R <span class="built_in">test</span>:<span class="built_in">test</span>  /test</span></span><br><span class="line"><span class="keyword">USER</span> test</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /test</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">ls</span> -al /</span></span><br></pre></td></tr></table></figure></li><li>执行build命令<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">docker build -t openjdk11_alpine .</span><br></pre></td></tr></table></figure></li><li>运行<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">run</span> -u test:test -<span class="keyword">it</span> <span class="comment">--name openjdk openjdk11_alpine</span></span><br></pre></td></tr></table></figure></li><li>查看java<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -<span class="built_in">version</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="/2022/08/21/Docker%E7%9F%A5/pasted-42.png" alt="java -version "></p><h1 id="查看docker容器信息"><a href="#查看docker容器信息" class="headerlink" title="查看docker容器信息"></a>查看docker容器信息</h1><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 容器<span class="built_in">id</span>/容器名字</span><br></pre></td></tr></table></figure><p><img src="/2022/08/21/Docker%E7%9F%A5/pasted-39.png" alt="docker inspect info"></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac技巧</title>
      <link href="/2022/08/21/Mac%E6%8A%80%E5%B7%A7/"/>
      <url>/2022/08/21/Mac%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="查看隐藏文件"><a href="#查看隐藏文件" class="headerlink" title="查看隐藏文件"></a>查看隐藏文件</h1><ul><li>1.点击左侧的访达图标。</li><li>2.在左侧菜单栏中点击房子图标的目录选项。</li><li>3.通过按快捷键 【shift cmmand 。】来让隐藏文件显示出来。</li><li>4.对文件进行查看。若是开头有个原点符号,即为隐藏文件。</li></ul><h1 id="mac安装Brew"><a href="#mac安装Brew" class="headerlink" title="mac安装Brew"></a>mac安装Brew</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/bin/</span>zsh -c <span class="string">&quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;</span></span><br></pre></td></tr></table></figure><p>如下图安装<br><img src="/2022/08/21/Mac%E6%8A%80/pasted-1.png" alt="mac安装Brew"><br>安装成功：</p><p><img src="/2022/08/21/Mac%E6%8A%80/pasted-8.png" alt="brew安装成功"></p><ul><li>brew -v<br><img src="/2022/08/21/Mac%E6%8A%80/pasted-9.png" alt="brew -v"></li></ul><h1 id="多线程下载Axel"><a href="#多线程下载Axel" class="headerlink" title="多线程下载Axel"></a>多线程下载Axel</h1><p>axel linux下轻量级下载加速工具。</p><ul><li>安装<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>axel</span><br></pre></td></tr></table></figure></li><li>用法：</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">--max-speed</span>=x, -s x 指定最大下载速度。</span><br><span class="line"><span class="attr">--num-connections</span>=x, -n x指定链接的数量。</span><br><span class="line"><span class="attr">--output</span>=x, -o x 指定下载的文件在本地保存的名字。如果指定的参数是一个文件夹，则文件会下载到指定的文件夹下。</span><br><span class="line"><span class="attr">--search</span><span class="selector-attr">[=x]</span>, -S<span class="selector-attr">[x]</span>Axel将会使用文件搜索引擎来查找文件的镜像。缺省时用的是filesearching.com。可以指定使用多少个不同的镜像来下载文件。</span><br><span class="line">检测镜像将会花费一定的时间，因为程序会测试服务器的速度，以及文件存在与否。</span><br><span class="line"><span class="attr">--no-proxy</span>, -N不使用代理服务器来下载文件。当然此选项对于透明代理来说无意义。</span><br><span class="line"><span class="attr">--verbose</span>如果想得到更多的状态信息，可以使用这个参数。</span><br><span class="line"><span class="attr">--quiet</span>, -q不向标准输出平台(stdout)输入信息。</span><br><span class="line"><span class="attr">--alternate</span>, -a指定这个参数后将显示一个交替变化的进度条。它显示不同的线程的进度和状态，以及当前的速度和估计的剩余下载时间。</span><br><span class="line"><span class="attr">--header</span>=x, -H x添加HTTP头域，格式为“Header: Value”。</span><br><span class="line"><span class="attr">--user-agent</span>=x, -U x有些web服务器会根据不同的User-Agent返回不同的内容。这个参数就可以用来指定User-Agent头域。缺省时此头域值包括“Axel”，它的版本号以及平台信息。</span><br><span class="line"><span class="attr">--help</span>, -h返回参数的简要介绍信息。</span><br><span class="line"><span class="attr">--version</span>, -V 版本信息</span><br></pre></td></tr></table></figure><ul><li>例子<br>下载lnmp安装包指定10个线程，存到&#x2F;tmp&#x2F;：<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axel -n <span class="number">10</span> -o <span class="regexp">/tmp/</span> http:<span class="regexp">//</span>www.jsdig.com/lnmp.tar.gz</span><br></pre></td></tr></table></figure></li></ul><h1 id="Mac重新安装Node-Js"><a href="#Mac重新安装Node-Js" class="headerlink" title="Mac重新安装Node Js"></a>Mac重新安装Node Js</h1><p>Node.js 的生态就很奇怪，太散了，版本又多。所以决定用 homebrew 来管理 nvm，然后用 nvm 管理 node.js。</p><ul><li>删除NodeJs<br>删除 &#x2F;usr&#x2F;local&#x2F;lib 下的任意 node 和 node_modules 的文件或目录<br>删除 &#x2F;usr&#x2F;local&#x2F;include 下的任意 node 和 node_modules 的文件或目录<br>删除 Home 目录下的任意 node 和 node_modules 的文件或目录<br>删除 &#x2F;usr&#x2F;local&#x2F;bin 下的任意 node 的可执行文件<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf <span class="regexp">/opt/</span>local<span class="regexp">/bin/</span>node <span class="regexp">/opt/</span>local<span class="regexp">/include/</span>node <span class="regexp">/opt/</span>local<span class="regexp">/lib/</span>node_modules</span><br></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>npm <span class="regexp">/usr/</span>local<span class="regexp">/share/m</span>an<span class="regexp">/man1/</span>node.<span class="number">1</span> <span class="regexp">/usr/</span>local<span class="regexp">/lib/</span>dtrace/node.d</span><br></pre></td></tr></table></figure>执行完成测试：测试 nvm、node、npm 三个命令是否还在<br>1.安装 nvm，用 nvm 控制 Node.js 的版本</li><li>安装Nodejs<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">brew install nvm</span><br><span class="line">``</span><br><span class="line">* 设置~/.bash_profile 中</span><br><span class="line">安装完成后，在 ~/.bash_profile 中添加以下内容，就可以在 bash 里面用 nvm 命令</span><br></pre></td></tr></table></figure></li></ul><p>#Node.js<br>source $(brew –prefix nvm)&#x2F;nvm.sh</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>更新 .bash<span class="emphasis">_profile 的缓存，使修改生效</span></span><br><span class="line"><span class="emphasis">``</span></span><br><span class="line"><span class="emphasis">source ~/.bash_</span>profile</span><br></pre></td></tr></table></figure><ul><li>通过 nvm 安装 Node.js<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install <span class="keyword">node</span><span class="title"></span></span><br></pre></td></tr></table></figure></li><li>安装完成后，查看是否安装成功<figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm <span class="comment">--version</span></span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">nvm list</span></span><br></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">node</span> <span class="title">-v</span></span><br></pre></td></tr></table></figure><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">npm</span> -v</span><br></pre></td></tr></table></figure></li><li>安装 cnpm，淘宝 NPM 镜像（方便网速不行的地区）<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https:<span class="regexp">//</span>registry.npm.taobao.org</span><br></pre></td></tr></table></figure>通过 brew 管理 nvm，再通过 nvm 管理 node。一个管一个，方便干净。</li></ul><h1 id="查看文件和文件夹大小"><a href="#查看文件和文件夹大小" class="headerlink" title="查看文件和文件夹大小"></a>查看文件和文件夹大小</h1><p>du可以查看文件及文件夹的大小。</p><ul><li>查看当前文件夹下文件和文件夹大小<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">du</span> -sh *</span><br></pre></td></tr></table></figure></li><li>排序 &#x2F;&#x2F;统计当前目录大小 并安大小 排序<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">du</span> -sm * | <span class="built_in">sort</span> -n</span><br></pre></td></tr></table></figure></li></ul><h1 id="每次重启终端都需要重新执行source-x2F-bash-profile"><a href="#每次重启终端都需要重新执行source-x2F-bash-profile" class="headerlink" title="每次重启终端都需要重新执行source .&#x2F;bash_profile"></a>每次重启终端都需要重新执行source .&#x2F;bash_profile</h1><p>Mac电脑配置完flutter环境变量后发现每次重启终端都需要重新执行source .&#x2F;bash_profile环境变量才能生效，检查发现是因为装了iTem2+zsh，导致每次加载的是 ~&#x2F;.zshrc文件，而 .zshrc文件中并没有定义环境变量。</p><p>解决：在.zshrc文件最后一行添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure><p>重新保存后再次重新打开终端即可。</p><h1 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h1><ul><li>Axel下载Docker<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axel -n <span class="number">10</span> https:<span class="regexp">//</span>desktop.docker.com<span class="regexp">/mac/</span>stable<span class="regexp">/amd64/</span><span class="number">64133</span>/Docker.dmg</span><br></pre></td></tr></table></figure></li><li>下载完成双击打开Docker ，如图所示 把docker复制至Applications目录</li></ul><p><img src="/2022/08/21/Mac%E6%8A%80/pasted-2.png" alt="安装docker"></p><ul><li>打开docker</li></ul><p><img src="/2022/08/21/Mac%E6%8A%80/pasted-3.png" alt="打开docker"></p><p><img src="/2022/08/21/Mac%E6%8A%80/pasted-5.png" alt="docker 提供图形化界面"></p><ul><li><p>打开 终端</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> <span class="literal">info</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/21/Mac%E6%8A%80/pasted-4.png" alt="docker info"></p></li><li><p>docker 镜像加速<br>打开docker 图形化设置找到 docker Engine 如下图所示添加 网易镜像加速地址，输入完成则点击Apply and Restart</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;http://hub-mirror.c.163.com&quot;</span>]</span><br></pre></td></tr></table></figure><p><img src="/2022/08/21/Mac%E6%8A%80/pasted-6.png" alt="图片/2022/08/21/Mac技/pasted-6.png"></p></li><li><p>docker run hello-world</p></li></ul><p><img src="/2022/08/21/Mac%E6%8A%80/pasted-7.png" alt="图片/2022/08/21/Mac技/pasted-7.png"></p><p> “registry-mirrors”: [“<a href="http://hub-mirror.c.163.com&quot;]">http://hub-mirror.c.163.com&quot;]</a></p><h1 id="如何解决Mac显示“您没有权限来打开应用-eclipse”的问题"><a href="#如何解决Mac显示“您没有权限来打开应用-eclipse”的问题" class="headerlink" title="如何解决Mac显示“您没有权限来打开应用 eclipse”的问题"></a>如何解决Mac显示“您没有权限来打开应用 eclipse”的问题</h1><p>  网上下载的最新版本Eclipse IDE for RCP and RAP Developers，今天在开启打开应用时报错您没有权限来打开应用 eclipse，请联系系统管理员来解决，<br> 打开terminal终端，输入以下命令，待执行完后，重新尝试打开应用即可：</p> <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">codesign -f -s - --deep <span class="regexp">/Applications/</span>Eclipse.app</span><br></pre></td></tr></table></figure><h1 id="卸载mysql"><a href="#卸载mysql" class="headerlink" title="卸载mysql"></a>卸载mysql</h1><ul><li>关闭 MySQL，在系统偏好设置中点击 MySQL，然后点击 Stop MySQL Server</li></ul><p><img src="/2022/08/21/Mac%E6%8A%80/pasted-10.png" alt="设置"></p><p><img src="/2022/08/21/Mac%E6%8A%80/pasted-11.png" alt="mysql"></p><ul><li>执行命令 <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> sudo rm <span class="regexp">/usr/</span>local/mysql</span><br><span class="line">sudo rm -rf <span class="regexp">/usr/</span>local/mysql*</span><br><span class="line">sudo rm -rf <span class="regexp">/Library/</span>StartupItems/MySQLCOM</span><br><span class="line">sudo rm -rf <span class="regexp">/var/</span>db<span class="regexp">/receipts/</span>com.mysql.*</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA技巧</title>
      <link href="/2022/08/18/IDEA%E6%8A%80%E5%B7%A7/"/>
      <url>/2022/08/18/IDEA%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="idea-自动去掉无用的包"><a href="#idea-自动去掉无用的包" class="headerlink" title="idea 自动去掉无用的包"></a>idea 自动去掉无用的包</h1><p>第一步：打开IDEA –&gt; File –&gt; Setting</p><p>第二步：打开Editor –&gt;Gerneral–&gt; 点击Auto Import<br>图中方框内勾选即可<br><img src="/2022/08/18/IDEA%E6%8A%80/pasted-0.png" alt="idea 自动去掉无用的包"></p><h1 id="IDEA-右侧maven，ant等侧边栏消失如何恢复"><a href="#IDEA-右侧maven，ant等侧边栏消失如何恢复" class="headerlink" title="IDEA 右侧maven，ant等侧边栏消失如何恢复"></a>IDEA 右侧maven，ant等侧边栏消失如何恢复</h1><ul><li>点击view –&gt;tool windows–&gt;下拉找到自己想要添加到侧边栏的选项即可</li></ul><p><img src="/2022/08/18/IDEA%E6%8A%80/pasted-1.png" alt="添加侧边栏"></p><h1 id="Idea-出现-https-start-spring-io-出现-超时-x2F-错误-等等"><a href="#Idea-出现-https-start-spring-io-出现-超时-x2F-错误-等等" class="headerlink" title="Idea 出现 https://start.spring.io 出现 超时 &#x2F; 错误 等等"></a>Idea 出现 <a href="https://start.spring.io/">https://start.spring.io</a> 出现 超时 &#x2F; 错误 等等</h1><ul><li>新建Spring项目<br><img src="/2022/08/18/IDEA%E6%8A%80/pasted-2.png" alt="新建Spring项目"></li><li>出错</li></ul><p><img src="/2022/08/18/IDEA%E6%8A%80/pasted-3.png" alt="出错"></p><ul><li>将 <a href="https://start.spring.io/">https://start.spring.io</a> 改为: <a href="https://start.aliyun.com/">https://start.aliyun.com/</a></li></ul><p><img src="/2022/08/18/IDEA%E6%8A%80/pasted-4.png" alt="点击设置"><br><img src="/2022/08/18/IDEA%E6%8A%80/pasted-5.png" alt="修改为阿里云地址"><br><img src="/2022/08/18/IDEA%E6%8A%80/pasted-6.png" alt="出现Alibaba Spring Library"></p><h1 id="idea-去除所有未引用的包"><a href="#idea-去除所有未引用的包" class="headerlink" title="idea 去除所有未引用的包"></a>idea 去除所有未引用的包</h1><ul><li>去掉当前页面或类下直接快捷键Ctrl + Alt + O;</li></ul><h1 id="idea切换大小写快捷键"><a href="#idea切换大小写快捷键" class="headerlink" title="idea切换大小写快捷键"></a>idea切换大小写快捷键</h1><ul><li>快捷键:Ctrl+Shift+u 功能:转换标量的大小写效果</li></ul>]]></content>
      
      
      <categories>
          
          <category> IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eclipse 技巧</title>
      <link href="/2022/08/18/Eclipse-%E6%8A%80%E5%B7%A7/"/>
      <url>/2022/08/18/Eclipse-%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="Eclipse设置代码自动提示"><a href="#Eclipse设置代码自动提示" class="headerlink" title="Eclipse设置代码自动提示"></a>Eclipse设置代码自动提示</h1><ul><li><p>第一步：打开Eclipse –&gt; Window –&gt; Preferences</p></li><li><p>第二步：点击Java –&gt; 打开Editor –&gt; 点击Content Assist</p></li><li><p>第三步：设置Auto activition triggers for Java 的值为 .abcdefghijklmnopqrstuvwxyz (记得别忘记那个小数点了 不然打个小数点没提示) 然后点击Apply保存配置即可。<br>注：有的版本要区分大小写 ：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">.abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="/2022/08/18/Eclipse-%E6%8A%80/pasted-0.png" alt="Eclipse设置代码自动提示"></p>]]></content>
      
      
      <categories>
          
          <category> Eclipse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Eclipse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql绿色版安装</title>
      <link href="/2022/08/16/mysql%E7%BB%BF%E8%89%B2%E7%89%88%E5%AE%89%E8%A3%85/"/>
      <url>/2022/08/16/mysql%E7%BB%BF%E8%89%B2%E7%89%88%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="下载mysql"><a href="#下载mysql" class="headerlink" title="下载mysql"></a>下载mysql</h1><p><a href="https://www.mysql.com/">https://www.mysql.com/</a>,<br>版本：5.7.32</p><ul><li><p>安装服务</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld <span class="attr">--install</span> <span class="built_in">mysql</span>(服务名称)</span><br></pre></td></tr></table></figure></li><li><p>删除服务</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld <span class="attr">--remove</span> <span class="built_in">mysql</span>(服务名称)</span><br></pre></td></tr></table></figure></li><li><p>初始化mysql：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">mysqld</span> <span class="literal">--</span><span class="comment">initialize</span> <span class="literal">--</span><span class="comment">console</span></span><br></pre></td></tr></table></figure><p>会打印root 密码</p></li><li><p>启动服务</p></li><li><p>登录mysql,使用登录密码为上面初始化mysql是自动生成的初始密码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -<span class="selector-tag">p</span></span><br></pre></td></tr></table></figure></li><li><p>修改密码：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;root&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>退出服务，重新用新密码登录</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> Mysql 绿色版安装 </tag>
            
            <tag> Mysql修改root密码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql重置root密码</title>
      <link href="/2022/08/16/%E5%85%B3%E4%BA%8Emysql/"/>
      <url>/2022/08/16/%E5%85%B3%E4%BA%8Emysql/</url>
      
        <content type="html"><![CDATA[<h1 id="mysql-重置root密码"><a href="#mysql-重置root密码" class="headerlink" title="mysql 重置root密码"></a>mysql 重置root密码</h1><p>如果不小心忘记了mysql的root密码？可以通过如下步骤进行重置。</p><ul><li><p>停止 mysql 服务<br>打开系统偏好设置 ——&gt; MySQL ——&gt; Stop MySQL Server</p></li><li><p>跳过授权验证 打开终端，输入 </p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld_safe <span class="comment">--skip-grant-tables ，</span></span><br></pre></td></tr></table></figure><p>以此来跳过授权验证。</p></li><li><p>无密码登陆mysql，重置root密码 重新打开一个终端，然后输入</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">mysql -uroot</span></span><br></pre></td></tr></table></figure><p>直接登陆（无需密码）。</p></li><li><p>登录成功后重置root密码，依次输入：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use mysql<span class="comment">;</span></span><br></pre></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> authentication_string=<span class="keyword">password</span>(<span class="string">&#x27;root&#x27;</span>) <span class="keyword">where</span> <span class="keyword">user</span>=<span class="string">&#x27;root&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges<span class="comment">;</span></span><br></pre></td></tr></table></figure></li><li><p>第六步 关闭mysqld_safe 客户端窗口 </p></li><li><p>启动mysql服务</p></li><li><p>用密码登录mysql</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -<span class="selector-tag">p</span></span><br></pre></td></tr></table></figure></li><li><p>重置root 密码</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> <span class="keyword">FOR</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> = <span class="keyword">PASSWORD</span>(<span class="string">&#x27;newpass&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>建立一个具有所有权限并且可以远程连接的用户</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;root&#x27;</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>;</span><br></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;172.16.%.%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;redhat&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges<span class="comment">;</span></span><br></pre></td></tr></table></figure></li></ul><p>补充：Mac中MySQL的默认安装位置：&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> mysql重置root密码 </tag>
            
            <tag> Mysql修改Root密码 </tag>
            
            <tag> Mysql 开启用户远程访问 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Admin</title>
      <link href="/2022/08/10/Hexo-Admin/"/>
      <url>/2022/08/10/Hexo-Admin/</url>
      
        <content type="html"><![CDATA[<p>使用Hexo 写博客 并使用gitHub page 发布互联网，所以Hexo 是个好东西。<br>以下分享就是使用Hexo Admin 主要解决写文章复制粘贴图片问题</p><h1 id="Hexo-Admin"><a href="#Hexo-Admin" class="headerlink" title="Hexo Admin"></a>Hexo Admin</h1><ul><li>安装Hexo -admin<figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --<span class="keyword">save</span> <span class="keyword">save</span> hexo-admin</span><br></pre></td></tr></table></figure></li><li>安装完成 下载<a href="/download/hexo-admin.7z">补丁</a> （目前是hexo-admin 版本是2.3.0）<br><img src="/2022/08/10/Hexo-Admi/pasted-0.png" alt="以下文件"><br>补丁主要解决：<ul><li>粘贴上传图片路径显示问题</li><li>汉化</li><li>添加按文章存储图片功能（方便管理）<br>原本系统默认将图片统一存储在“images”目录下，文章一多，图片数量疯涨，就不容易维护，所以我添加了按文章存储图片的功能，图片将存储在与文章同目录的同名文件夹下。<br><img src="/2022/08/10/Hexo-Admi/pasted-2.png" alt="按文章存储图片"><br>只需要在设置界面，勾选“图片存储在资源目录下”选项即可</li></ul></li></ul><p><img src="/2022/08/10/Hexo-Admi/pasted-1.png" alt="图片存储在资源目录下"></p><ul><li>解压完成后把里面文件复制至node_modules\hexo-admin</li><li>使用Hexo s -d命令进行启动</li></ul><p><img src="/2022/08/10/Hexo-Admi/pasted-3.png" alt="Hexo admin 界面"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Hexo admin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-小功能</title>
      <link href="/2022/08/09/Hexo-%E5%B0%8F%E5%8A%9F%E8%83%BD/"/>
      <url>/2022/08/09/Hexo-%E5%B0%8F%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<p>Hexo 小功能分享</p><h1 id="站内搜索"><a href="#站内搜索" class="headerlink" title="站内搜索"></a>站内搜索</h1><ul><li>安装插件：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install hexo<span class="operator">-</span>generator<span class="operator">-</span><span class="keyword">search</span> <span class="comment">--save</span></span><br></pre></td></tr></table></figure></li><li>在站点根 _config.yml 里头添加设置项：<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.<span class="keyword">xml</span></span><br><span class="line">  <span class="title">field</span>: post</span><br></pre></td></tr></table></figure></li><li>编辑 Hexo 主题配置文件maupassant&#x2F;_config.yml，添加以下配置<figure class="highlight mercury"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self_search: <span class="built_in">true</span> ## Use a jQuery-based <span class="meta">local</span> search engine, <span class="built_in">true</span>/<span class="built_in">false</span>.</span><br></pre></td></tr></table></figure></li><li>再次启动hexo<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成文件</span></span><br><span class="line"><span class="attribute">hexo</span> g</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>效果<br><img src="/2022/08/09/Hexo-%E5%B0%8F%E5%8A%9F/pasted-0.png" alt="站内搜索效果"></li></ul><h1 id="百度统计"><a href="#百度统计" class="headerlink" title="百度统计"></a>百度统计</h1><ul><li>直接在百度统计网站上建立一个网站 获取uid<br><a href="https://tongji.baidu.com/web5/10000252043/welcome/login">https://tongji.baidu.com/web5/10000252043/welcome/login</a></li><li>编辑 Hexo 主题配置文件maupassant&#x2F;_config.yml，添加以下配置<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">baidu_analytics:</span> </span><br></pre></td></tr></table></figure></li></ul><h1 id="google统计"><a href="#google统计" class="headerlink" title="google统计"></a>google统计</h1><ul><li>直接在google统计网站上建立一个网站 获取uid<br><a href="https://analytics.google.com/analytics/web/#/">https://analytics.google.com/analytics/web/#/</a><br>*��站上建立一个网站 获取uid<br><a href="https://analytics.google.com/analytics/web/#/">https://analytics.google.com/analytics/web/#/</a></li><li>编辑 Hexo 主题配置文件maupassant&#x2F;_config.yml，添加以下配置<figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">google_analytics</span>: <span class="comment">## Your Google Analytics tracking id, e.g. UA-42425684-2</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="中文显示"><a href="#中文显示" class="headerlink" title="中文显示"></a>中文显示</h1><p>编辑站内目录下 _config.yml，添加以下配置</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">title:</span> perter blog</span><br><span class="line"><span class="symbol">subtitle:</span> perter的技术分享</span><br><span class="line"><span class="symbol">description:</span> perter的技术分享</span><br><span class="line"><span class="symbol">keywords:</span></span><br><span class="line"><span class="symbol">author:</span> Peter tan</span><br><span class="line"><span class="symbol">language:</span> <span class="built_in">zh</span>-CN</span><br><span class="line"><span class="symbol">timezone:</span> Asia/Shanghai</span><br></pre></td></tr></table></figure><h1 id="菜单配置"><a href="#菜单配置" class="headerlink" title="菜单配置"></a>菜单配置</h1><p>编辑 Hexo 主题配置文件maupassant&#x2F;_config.yml，添加以下配置</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  - page: home</span><br><span class="line">    directory: .</span><br><span class="line">    <span class="attribute">icon</span>: fa-home</span><br><span class="line">  - <span class="attribute">page</span>: archive</span><br><span class="line">    <span class="attribute">directory</span>: archives/</span><br><span class="line">    <span class="attribute">icon</span>: fa-archive</span><br><span class="line"><span class="attribute">info</span>:</span><br><span class="line">  <span class="attribute">avatar</span>: /img/head.jpg</span><br><span class="line">  <span class="attribute">discription</span>: 我喜欢计算编程,专注后端开发 性能调优 spring 框架</span><br><span class="line">  <span class="attribute">outlinkitem</span>:</span><br><span class="line">#    - <span class="attribute">name</span>: twitter</span><br><span class="line">#      <span class="attribute">outlink</span>: <span class="attribute">https</span>:<span class="comment">//twitter.com/username</span></span><br><span class="line">#      <span class="attribute">message</span>: Twitter</span><br><span class="line">    - <span class="attribute">name</span>: envelope</span><br><span class="line">      <span class="attribute">outlink</span>: <span class="attribute">mailto</span>:beityw<span class="variable">@hotmail</span>.com</span><br><span class="line">      <span class="attribute">message</span>: Email</span><br><span class="line">    - <span class="attribute">name</span>: github</span><br><span class="line">      <span class="attribute">outlink</span>: <span class="attribute">https</span>:<span class="comment">//github.com/peterTanBlog/</span></span><br><span class="line">      <span class="attribute">message</span>: Github</span><br><span class="line">#    - <span class="attribute">name</span>: rss</span><br><span class="line">#      <span class="attribute">outlink</span>: /atom.xml</span><br><span class="line">#      <span class="attribute">message</span>: RSS</span><br><span class="line"></span><br><span class="line"><span class="attribute">links</span>:</span><br><span class="line">  - <span class="attribute">title</span>: 我的博客</span><br><span class="line">    <span class="attribute">url</span>: <span class="attribute">https</span>:<span class="comment">//smallwenzi.github.io</span></span><br><span class="line">    <span class="attribute">src</span>: <span class="attribute">https</span>:<span class="comment">//smallwenzi.github.io/img/head.jpg</span></span><br><span class="line">    <span class="attribute">desc</span>: 我的博客    </span><br><span class="line">    </span><br></pre></td></tr></table></figure><h1 id="百度和google收录网站"><a href="#百度和google收录网站" class="headerlink" title="百度和google收录网站"></a>百度和google收录网站</h1><ul><li>安装插件</li></ul><p>hexo-generator-sitemap 【该包用于支持Google搜索引擎】</p><p>hexo-generator-baidu-sitemap 【该包用于支持百度搜索引擎】</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cnpm <span class="keyword">install </span>hexo-generator-sitemap --save</span><br><span class="line">cnpm <span class="keyword">install </span>hexo-generator-<span class="keyword">baidu-sitemap </span>--save</span><br></pre></td></tr></table></figure><ul><li>编辑站内目录下 _config.yml，添加以下配置<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">sitemap:</span></span><br><span class="line"><span class="symbol"> path:</span> sitemap.xml</span><br><span class="line"><span class="symbol">baidusitemap:</span></span><br><span class="line"><span class="symbol"> path:</span> baidusitemap.xml</span><br></pre></td></tr></table></figure></li><li>执行hexo g和hexo d进行发布网站</li></ul><h2 id="google-收录网站"><a href="#google-收录网站" class="headerlink" title="google 收录网站"></a>google 收录网站</h2><ul><li>打开<a href="https://search.google.com/search-console/welcome?hl=zh-CN&utm_source=wmx&utm_medium=deprecation-pane&utm_content=home">google search console</a>, 并添加需要抓取的域名，并把googlexxx.html文件放在网站根目录 如下图<br><img src="/2022/08/09/Hexo-%E5%B0%8F%E5%8A%9F/pasted-1.png" alt="google search console"><br>输入自己博客地址 然后点击验证按钮，成功则返回下图：<br><img src="/2022/08/09/Hexo-%E5%B0%8F%E5%8A%9F/pasted-2.png" alt="完成验证"></li><li>点击上图前往资源页面，或通过<a href="https://search.google.com/search-console/sitemaps?resource_id=https://petertanblog.github.io/">link</a>进入，并提交你的sitemap.xml<br><img src="/2022/08/09/Hexo-%E5%B0%8F%E5%8A%9F/pasted-3.png" alt="输入sitemap.xml"><br><img src="/2022/08/09/Hexo-%E5%B0%8F%E5%8A%9F/pasted-4.png" alt="提交站点"></li></ul><h2 id="百度收录网站"><a href="#百度收录网站" class="headerlink" title="百度收录网站"></a>百度收录网站</h2><ul><li>建立站点管理，打开<a href="https://ziyuan.baidu.com/site/index#/">link</a>, 并填写你的域名<br><img src="/2022/08/09/Hexo-%E5%B0%8F%E5%8A%9F/pasted-5.png" alt="填写你的域名"></li><li>勾选对应站点属性<br><img src="/2022/08/09/Hexo-%E5%B0%8F%E5%8A%9F/pasted-6.png" alt="勾选对应站点属性"></li><li>下载认证文件，并放在网站根&#x2F;source目录<br><img src="/2022/08/09/Hexo-%E5%B0%8F%E5%8A%9F/pasted-7.png" alt="验证站点"></li></ul><p>source 目录下验证文件，hexo g运行后就会复制文件至public 目录：</p><p><img src="/2022/08/09/Hexo-%E5%B0%8F%E5%8A%9F/pasted-14.png" alt="source目录"></p><ul><li>执行hexo g和hexo d进行发布网站 后进行 上图点击这里确认验证文件可以正常访问–&gt;点击完成验证</li></ul><h2 id="新链接由我们主动推送给百度"><a href="#新链接由我们主动推送给百度" class="headerlink" title="新链接由我们主动推送给百度"></a>新链接由我们主动推送给百度</h2><ul><li><p>在<a href="https://ziyuan.baidu.com/site/index#/">站点管理</a> 点击刚才添加的网站<br><img src="/2022/08/09/Hexo-%E5%B0%8F%E5%8A%9F/pasted-8.png" alt="站点管理"></p></li><li><p>点击菜单：资源提交–&gt;普通收录，我们就看到token<br><img src="/2022/08/09/Hexo-%E5%B0%8F%E5%8A%9F/pasted-10.png" alt="普通收录"></p></li><li><p>安装插件：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm <span class="keyword">install </span>hexo-<span class="keyword">baidu-url-submit </span>--save</span><br></pre></td></tr></table></figure></li><li><p>编辑站内目录下 _config.yml，添加以下配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">baidu_url_submit:</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">100</span> <span class="comment"># 提交最新的一个链接</span></span><br><span class="line">  <span class="attr">host:</span>  <span class="comment"># 在百度站长平台中注册的域名</span></span><br><span class="line">  <span class="attr">token:</span> <span class="string">第二步获取的token</span> <span class="comment"># 请注意这是您的秘钥，所以请不要把博客源代码发布在公众仓库里!</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">baidu_urls.txt</span> <span class="comment"># 文本文档的地址，新链接会保存在此文本文档里</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">   <span class="attr">repository:</span> <span class="string">xxx</span></span><br><span class="line">   <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line"> <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">baidu_url_submitter</span> </span><br></pre></td></tr></table></figure></li><li><p>执行hexo g和hexo d进行发布网站 就会看到<br>新的链接就会主动推送给百度，然后百度就会更快地派爬虫来发现你站点中的新链接，可以在第一时间收录新建的链接。</p></li></ul><p><img src="/2022/08/09/Hexo-%E5%B0%8F%E5%8A%9F/pasted-9.png" alt="推送"></p><h1 id="主题配置文件"><a href="#主题配置文件" class="headerlink" title="主题配置文件"></a>主题配置文件</h1><ul><li>将maupassant 下_config.yml 复制副本并命名为_config.maupassant.yml，最后把文件copy 至hexo目录下<br><img src="/2022/08/09/Hexo-%E5%B0%8F%E5%8A%9F/pasted-11.png" alt="_config.maupassant.yml"></li></ul><h1 id="开启文章目录"><a href="#开启文章目录" class="headerlink" title="开启文章目录"></a>开启文章目录</h1><ul><li>打开站内目录_config.yml 添加metadata 设置toc参数<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">    <span class="attr">toc:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li>运行hexo s -d 访问<a href="http://localhost:4000/admin/">http://localhost:4000/admin/</a> 这样就能后台设置toc参数</li></ul><p><img src="/2022/08/09/Hexo-%E5%B0%8F%E5%8A%9F/pasted-12.png" alt="后台设置toc参数"><br>页面显示目录效果：<br><img src="/2022/08/09/Hexo-%E5%B0%8F%E5%8A%9F/pasted-13.png" alt="页面显示目录效果"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> hexo 站内搜索 </tag>
            
            <tag> hexo 百度统计 </tag>
            
            <tag> hexo google统计 </tag>
            
            <tag> 百度收录hexo博客 </tag>
            
            <tag> google收录hexo 博客 </tag>
            
            <tag> maupassant 主题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo添加评论插件</title>
      <link href="/2022/08/09/Hexo%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8F%82%E5%8A%A0/"/>
      <url>/2022/08/09/Hexo%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8F%82%E5%8A%A0/</url>
      
        <content type="html"><![CDATA[<p>utterances 是一个基于 Github issues 构建的轻量级评论插件。使用 Github 账号登录后才能评论。</p><h1 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h1><ul><li>关于maupassant主题：<br><a href="https://github.com/tufu9441/maupassant-hexo">https://github.com/tufu9441/maupassant-hexo</a></li><li>在hexo目录下 git bash命令框执行<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github<span class="selector-class">.com</span>:tufu9441/maupassant-hexo<span class="selector-class">.git</span> themes/maupassant</span><br><span class="line">cnpm install hexo-renderer-pug <span class="attr">--save</span></span><br><span class="line">cnpm install hexo-renderer-sass <span class="attr">--save</span></span><br></pre></td></tr></table></figure></li><li>编辑hexo 目录下_config.yml 修改主题<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">theme:</span> maupassant</span><br></pre></td></tr></table></figure></li><li>在hexo目录下 git bash命令框启动<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo s</span></span><br></pre></td></tr></table></figure>效果<br><img src="/2022/08/09/Hexo%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8F%82/pasted-1.png" alt="效果"></li></ul><h1 id="配置-Github-仓库"><a href="#配置-Github-仓库" class="headerlink" title="配置 Github 仓库"></a>配置 Github 仓库</h1><p>由于是基于 Github issues，我们需要一个仓库来存储评论， 所以我们需要在 Github 上创建一个空库，并且必须是 pulbic 的，这样用户才可以查看并发布评论。</p><p><img src="/2022/08/09/Hexo%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8F%82/pasted-2.png" alt="Github 仓库"></p><h1 id="安装-Github-App"><a href="#安装-Github-App" class="headerlink" title="安装 Github App"></a>安装 Github App</h1><p>安装地址：<a href="https://github.com/apps/utterances">https://github.com/apps/utterances</a></p><p>访问安装地址，进入安装页面，单击 Install 按钮；<br><img src="/2022/08/09/Hexo%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8F%82/pasted-3.png" alt="utterances"></p><p>选择关联的仓库，我们选择刚刚建好的仓库；<br><img src="/2022/08/09/Hexo%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8F%82/pasted-4.png" alt="选择刚刚建好的仓库"><br>至此，Github 端配置完成，接下来在网页或博客中配置使用 utterances。</p><h1 id="使用-utterances"><a href="#使用-utterances" class="headerlink" title="使用 utterances"></a>使用 utterances</h1><ul><li>编辑 Hexo 主题配置文件maupassant&#x2F;_config.yml，添加以下配置：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">utterances:</span> <span class="comment">## See: https://utteranc.es</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment">## If you want to use Utterances comment system, please set the value to true.</span></span><br><span class="line">  <span class="attr">repo:</span>  <span class="comment">## The repository utterances will connect to, e.g. tufu9441/comments</span></span><br><span class="line">  <span class="attr">identifier:</span> <span class="string">title</span> <span class="comment">## The mapping between blog posts and GitHub issues.</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">github-light</span> <span class="comment">## Choose an Utterances theme which matches your blog.</span></span><br></pre></td></tr></table></figure></li><li>再次启动hexo<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo s</span></span><br></pre></td></tr></table></figure>效果</li></ul><p><img src="/2022/08/09/Hexo%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8F%82/pasted-5.png" alt="评论"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> maupassant 主题 </tag>
            
            <tag> utterances 评论插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 搭建博客</title>
      <link href="/2022/08/08/Hexo-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/08/08/Hexo-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>这是一篇很详尽的独立博客搭建教程 里面以windows 为例 介绍了github、Hexo和hexo-admin设置等过程</p><h1 id="系统环境配置"><a href="#系统环境配置" class="headerlink" title="系统环境配置"></a>系统环境配置</h1><p>要使用Hexo，需要在你的系统中支持Nodejs以及Git，如果还没有，那就开始安装吧！</p><h2 id="安装Node-Js"><a href="#安装Node-Js" class="headerlink" title="安装Node Js"></a>安装Node Js</h2><p> 下载NodeJs:<a href="https://nodejs.org/download/release/v14.20.0/">NodeJs 14.20</a></p><p> 安装Nodejs:<a href="https://www.runoob.com/nodejs/nodejs-install-setup.html">教程</a></p><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>下载地址：<a href="https://git-scm.com/download/">git</a></p><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><ul><li><p>git bash 命令框安装淘宝镜像</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https:<span class="regexp">//</span>registry.npm.taobao.org </span><br></pre></td></tr></table></figure></li><li><p>git bash 命令框安装Hexo</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-<span class="keyword">cli</span> </span><br></pre></td></tr></table></figure></li><li><p>git bash 命令框查看版本</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo -v</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/08/Hexo-%E6%90%AD%E5%BB%BA%E5%8D%9A/pasted-1.png" alt="hexo-v"></p></li><li><p>git bash 命令框初始化</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">init</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="/2022/08/08/Hexo-%E6%90%AD%E5%BB%BA%E5%8D%9A/pasted-2.png" alt="hexo -init"><br>文件夹下就会有以下文件<br><img src="/2022/08/08/Hexo-%E6%90%AD%E5%BB%BA%E5%8D%9A/pasted-3.png" alt="文件夹图"></p><ul><li>git bash 命令框启动 hexo 并访问<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo s</span></span><br></pre></td></tr></table></figure><img src="/2022/08/08/Hexo-%E6%90%AD%E5%BB%BA%E5%8D%9A/pasted-4.png" alt="访问"><br>打开<a href="http://localhost:4000/">http://localhost:4000/</a>, 看到如下, 成功</li></ul><p><img src="/2022/08/08/Hexo-%E6%90%AD%E5%BB%BA%E5%8D%9A/pasted-5.png" alt="页面"></p><h1 id="Github-Pages设置"><a href="#Github-Pages设置" class="headerlink" title="Github Pages设置"></a>Github Pages设置</h1><ul><li><p>注册Github并创建一个仓库<br>注册很简单, 假设已经注册<br>创建一个新的仓库,仓库名为perteTanBlog.github.io,其他的可以不勾选,仓库是公共仓库<br><img src="/2022/08/08/Hexo-%E6%90%AD%E5%BB%BA%E5%8D%9A/pasted-6.png" alt="创建仓库"></p></li><li><p>生成SSH Keys ：在git bash执行</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> ssh-keygen -t rsa -C <span class="string">&quot;邮件地址&quot;</span> <span class="regexp">//</span>这个邮件地址是你注册github时绑定的</span><br><span class="line">然后<span class="number">4</span>个回车,如果文件存在让你覆盖你就ok就行</span><br></pre></td></tr></table></figure></li><li><p>git bash 命令框查看ssh key:</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~<span class="regexp">/.ssh/i</span>d_rsa.pub</span><br></pre></td></tr></table></figure></li><li><p>打开Github,添加新的SSH Key<br><img src="/2022/08/08/Hexo-%E6%90%AD%E5%BB%BA%E5%8D%9A/pasted-7.png" alt="找到SSH and GPG key"><br><img src="/2022/08/08/Hexo-%E6%90%AD%E5%BB%BA%E5%8D%9A/pasted-8.png" alt="添加SSH key"></p></li><li><p>git bash 输入: ssh -T <a href="mailto:&#103;&#105;&#x74;&#x40;&#103;&#105;&#116;&#104;&#117;&#x62;&#x2e;&#99;&#x6f;&#109;">&#103;&#105;&#x74;&#x40;&#103;&#105;&#116;&#104;&#117;&#x62;&#x2e;&#99;&#x6f;&#109;</a>, 出现如下图所示, 添加成功(如果有让你输入的,你就yes就行)<br><img src="/2022/08/08/Hexo-%E6%90%AD%E5%BB%BA%E5%8D%9A/pasted-9.png" alt="git bash"></p></li></ul><h1 id="发布博客至互联网"><a href="#发布博客至互联网" class="headerlink" title="发布博客至互联网"></a>发布博客至互联网</h1><ul><li>打开博客所在文件夹下,打开_config.yml<br><img src="/2022/08/08/Hexo-%E6%90%AD%E5%BB%BA%E5%8D%9A/pasted-10.png" alt="_config.yml"></li><li>拉到最后, 替换以下内容<br><img src="/2022/08/08/Hexo-%E6%90%AD%E5%BB%BA%E5%8D%9A/pasted-11.png" alt="_config.yml"></li></ul><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">deploy:</span></span><br><span class="line"><span class="symbol">  type:</span> git</span><br><span class="line"><span class="symbol">  repository:</span> git ssh地址</span><br><span class="line"><span class="symbol">  branch:</span> master</span><br></pre></td></tr></table></figure><ul><li>安装hexo-deployer-git自动部署发布工具<figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install hexo-deployer-git <span class="comment">--save</span></span><br></pre></td></tr></table></figure></li><li>git bash 命令框执行hexo g命令生成页面 <figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo g</span></span><br></pre></td></tr></table></figure></li><li>上传页面到Github<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo d</span></span><br></pre></td></tr></table></figure>此时访问<a href="https://username.github.io就可以访问你的博客啦/">https://username.github.io就可以访问你的博客啦</a></li></ul><h1 id="hexo-常用命令"><a href="#hexo-常用命令" class="headerlink" title="hexo 常用命令"></a>hexo 常用命令</h1><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="string">&quot;name&quot;</span>       <span class="meta"># 新建文章</span></span><br><span class="line">hexo <span class="keyword">new</span> page <span class="string">&quot;name&quot;</span>  <span class="meta"># 新建页面</span></span><br><span class="line">hexo g                <span class="meta"># 生成页面</span></span><br><span class="line">hexo d                <span class="meta"># 部署</span></span><br><span class="line">hexo g -d             <span class="meta"># 生成页面并部署</span></span><br><span class="line">hexo s                <span class="meta"># 本地预览</span></span><br><span class="line">hexo clean            <span class="meta"># 清除缓存和已生成的静态文件</span></span><br><span class="line">hexo help             <span class="meta"># 帮助</span></span><br></pre></td></tr></table></figure><h1 id="注意事项（避雷）"><a href="#注意事项（避雷）" class="headerlink" title="注意事项（避雷）"></a>注意事项（避雷）</h1><ul><li>要注意浏览器自动缓存问题，在第一次输入后，如果不清除缓存，就算做了更改，浏览器还是会用上一次的DNS解析结果尽管这可能是错误的，所以如果更改设置后还是和原来一样的错误结果，可以试试清除浏览器缓存</li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
